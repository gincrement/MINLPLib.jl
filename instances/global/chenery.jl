using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44]
@variable(m, x[x_Idx])
set_lower_bound(x[36], 0.0)
set_lower_bound(x[4], 0.0)
set_lower_bound(x[32], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[34], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[31], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[33], 0.0)
set_lower_bound(x[1], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[35], 0.0)
set_lower_bound(x[10], 0.0)
set_upper_bound(x[1], 2000.0)
set_upper_bound(x[2], 2000.0)
set_upper_bound(x[3], 2000.0)
set_upper_bound(x[4], 2000.0)
set_upper_bound(x[5], 100.0)
set_upper_bound(x[6], 100.0)
set_upper_bound(x[7], 100.0)
set_upper_bound(x[8], 100.0)
set_upper_bound(x[9], 2000.0)
set_upper_bound(x[10], 2000.0)
set_upper_bound(x[11], 2000.0)
set_upper_bound(x[12], 2000.0)
set_lower_bound(x[13], 0.1)
set_upper_bound(x[13], 100.0)
set_lower_bound(x[14], 0.1)
set_upper_bound(x[14], 100.0)
set_lower_bound(x[15], 0.1)
set_upper_bound(x[15], 100.0)
set_lower_bound(x[16], 0.1)
set_upper_bound(x[16], 100.0)
set_upper_bound(x[17], 1.0)
set_upper_bound(x[18], 1.0)
set_upper_bound(x[19], 1.0)
set_upper_bound(x[20], 1.0)
set_upper_bound(x[21], 1.0)
set_upper_bound(x[22], 1.0)
set_upper_bound(x[23], 1.0)
set_upper_bound(x[24], 1.0)
set_upper_bound(x[25], 400.0)
set_upper_bound(x[26], 400.0)
set_upper_bound(x[27], 400.0)
set_upper_bound(x[28], 400.0)
set_upper_bound(x[29], 400.0)
set_upper_bound(x[30], 400.0)
set_upper_bound(x[31], 4.0)
set_upper_bound(x[32], 4.0)
set_upper_bound(x[33], 4.0)
set_upper_bound(x[34], 4.0)
set_upper_bound(x[35], 4.0)
set_upper_bound(x[36], 4.0)
set_lower_bound(x[37], 0.25)
set_upper_bound(x[37], 4.0)
set_lower_bound(x[38], 0.25)
set_upper_bound(x[38], 4.0)
set_lower_bound(x[39], 0.01)
set_lower_bound(x[41], 0.001)
set_lower_bound(x[42], 0.001)
set_lower_bound(x[43], 0.001)
set_lower_bound(x[44], 0.001)


# ----- Constraints ----- #
@constraint(m, e1, -x[9]-x[10]-x[11]-x[12]-objvar == 0.0)
@constraint(m, e2, x[1]-x[9]-x[25]+x[28] >= 0.0)
@constraint(m, e3, -0.1*x[1]+x[2]-x[10]-x[26]+x[29] >= 0.0)
@constraint(m, e4, -0.2*x[1]-0.1*x[2]+x[3]-x[11]-x[27]+x[30] >= 0.0)
@constraint(m, e5, -0.2*x[1]-0.3*x[2]-0.1*x[3]+x[4]-x[12] >= 0.0)
@NLconstraint(m, e6, x[31]*x[28]-x[34]*x[25]+x[32]*x[29]-x[35]*x[26]+x[33]*x[30]-x[36]*x[27] <= 0.0)
@constraint(m, e7, -0.005*x[28]+x[31] == 1.0)
@constraint(m, e8, -0.0157*x[29]+x[32] == 1.0)
@constraint(m, e9, -0.00178*x[30]+x[33] == 1.0)
@constraint(m, e10, 0.005*x[25]+x[34] == 1.0)
@constraint(m, e11, 0.001*x[26]+x[35] == 1.1)
@constraint(m, e12, 0.01*x[27]+x[36] == 1.0)
@NLconstraint(m, e13, -100*(x[39]*x[13])^(-0.674)+x[9] == 0.0)
@NLconstraint(m, e14, -230*(x[39]*x[14])^(-0.246)+x[10] == 0.0)
@NLconstraint(m, e15, -220*(x[39]*x[15])^(-0.587)+x[11] == 0.0)
@NLconstraint(m, e16, -450*(x[39]*x[16])^(-0.352)+x[12] == 0.0)
@NLconstraint(m, e17, x[17]*x[1]+x[18]*x[2]+x[19]*x[3]+x[20]*x[4] <= 750.0)
@NLconstraint(m, e18, x[21]*x[1]+x[22]*x[2]+x[23]*x[3]+x[24]*x[4] == 500.0)
@constraint(m, e19, -x[5]+x[13]-0.1*x[14]-0.2*x[15]-0.2*x[16] == 0.0)
@constraint(m, e20, -x[6]+x[14]-0.1*x[15]-0.3*x[16] == 0.0)
@constraint(m, e21, -x[7]+x[15]-0.1*x[16] == 0.0)
@constraint(m, e22, -x[8]+x[16] == 0.0)
@constraint(m, e23, -x[37]+x[38] == 0.0)
@NLconstraint(m, e24, -(2.06748466257669*x[38])^(-0.89)+x[41] == 0.0)
@NLconstraint(m, e25, -(1.25733634311512*x[38])^(-0.71)+x[42] == 0.0)
@NLconstraint(m, e26, -(0.00908173562058528*x[38])^(-0.8)+x[43] == 0.0)
@NLconstraint(m, e27, -(124.31328320802*x[38])^(-0.95)+x[44] == 0.0)
@NLconstraint(m, e28, -(0.674+0.326/x[41])^0.123595505617978+3.97*x[17] == 0.0)
@NLconstraint(m, e29, -(0.557+0.443/x[42])^0.408450704225352+3.33*x[18] == 0.0)
@NLconstraint(m, e30, -(0.00900000000000001+0.991/x[43])^0.25+1.67*x[19] == 0.0)
@NLconstraint(m, e31, -(0.99202+0.00798/x[44])^0.0526315789473684+1.84*x[20] == 0.0)
@NLconstraint(m, e32, -(0.326+0.674*x[41])^0.123595505617978+3.97*x[21] == 0.0)
@NLconstraint(m, e33, -(0.443+0.557*x[42])^0.408450704225352+3.33*x[22] == 0.0)
@NLconstraint(m, e34, -(0.991+0.00900000000000001*x[43])^0.25+1.67*x[23] == 0.0)
@NLconstraint(m, e35, -(0.00798+0.99202*x[44])^0.0526315789473684+1.84*x[24] == 0.0)
@NLconstraint(m, e36, -x[37]*x[21]+x[5]-x[17] == 0.0)
@NLconstraint(m, e37, -x[37]*x[22]+x[6]-x[18] == 0.0)
@NLconstraint(m, e38, -x[37]*x[23]+x[7]-x[19] == 0.0)
@NLconstraint(m, e39, -x[37]*x[24]+x[8]-x[20] == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.