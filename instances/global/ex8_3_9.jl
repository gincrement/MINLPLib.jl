using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
@variable(m, x[x_Idx])
set_lower_bound(x[16], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[62], 0.0)
set_lower_bound(x[38], 0.0)
set_lower_bound(x[42], 0.0)
set_lower_bound(x[78], 0.0)
set_lower_bound(x[56], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[59], 0.0)
set_lower_bound(x[77], 0.0)
set_lower_bound(x[74], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[69], 0.0)
set_lower_bound(x[43], 0.0)
set_lower_bound(x[71], 0.0)
set_lower_bound(x[36], 0.0)
set_lower_bound(x[4], 0.0)
set_lower_bound(x[32], 0.0)
set_lower_bound(x[54], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[58], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[53], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[37], 0.0)
set_lower_bound(x[63], 0.0)
set_lower_bound(x[57], 0.0)
set_lower_bound(x[55], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[41], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[52], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[49], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[10], 0.0)
set_lower_bound(x[72], 0.0)
set_lower_bound(x[67], 0.0)
set_lower_bound(x[79], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[45], 0.0)
set_lower_bound(x[66], 0.0)
set_lower_bound(x[75], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[40], 0.0)
set_lower_bound(x[44], 0.0)
set_lower_bound(x[61], 0.0)
set_lower_bound(x[50], 0.0)
set_lower_bound(x[31], 0.0)
set_lower_bound(x[33], 0.0)
set_lower_bound(x[47], 0.0)
set_lower_bound(x[68], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[35], 0.0)
set_lower_bound(x[64], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[60], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[34], 0.0)
set_lower_bound(x[46], 0.0)
set_lower_bound(x[51], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[48], 0.0)
set_lower_bound(x[73], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[39], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[70], 0.0)
set_lower_bound(x[65], 0.0)
set_lower_bound(x[76], 0.0)
set_upper_bound(x[2], 1000.0)
set_upper_bound(x[3], 1000.0)
set_upper_bound(x[4], 1000.0)
set_upper_bound(x[5], 1000.0)
set_upper_bound(x[6], 1000.0)
set_upper_bound(x[7], 1000.0)
set_upper_bound(x[8], 1000.0)
set_upper_bound(x[9], 1000.0)
set_upper_bound(x[10], 1000.0)
set_upper_bound(x[11], 1000.0)
set_upper_bound(x[12], 10.0)
set_upper_bound(x[13], 10.0)
set_upper_bound(x[14], 10.0)
set_upper_bound(x[15], 10.0)
set_upper_bound(x[16], 10.0)
set_upper_bound(x[17], 10.0)
set_upper_bound(x[18], 10.0)
set_upper_bound(x[19], 10.0)
set_upper_bound(x[20], 10.0)
set_upper_bound(x[21], 10.0)
set_upper_bound(x[22], 1000.0)
set_upper_bound(x[23], 1000.0)
set_upper_bound(x[24], 1000.0)
set_upper_bound(x[25], 1000.0)
set_upper_bound(x[26], 1000.0)
set_upper_bound(x[27], 10.0)
set_upper_bound(x[28], 10.0)
set_upper_bound(x[29], 10.0)
set_upper_bound(x[30], 10.0)
set_upper_bound(x[31], 10.0)
set_upper_bound(x[32], 10.0)
set_upper_bound(x[33], 10.0)
set_upper_bound(x[34], 10.0)
set_upper_bound(x[35], 10.0)
set_upper_bound(x[36], 10.0)
set_upper_bound(x[37], 1000.0)
set_upper_bound(x[38], 1000.0)
set_upper_bound(x[39], 1000.0)
set_upper_bound(x[40], 1000.0)
set_upper_bound(x[41], 1000.0)
set_upper_bound(x[42], 1000.0)
set_upper_bound(x[43], 1000.0)
set_upper_bound(x[44], 1000.0)
set_upper_bound(x[45], 1000.0)
set_upper_bound(x[46], 1000.0)
set_upper_bound(x[47], 1000.0)
set_upper_bound(x[48], 1000.0)
set_upper_bound(x[49], 1000.0)
set_upper_bound(x[50], 1000.0)
set_upper_bound(x[51], 1000.0)
set_upper_bound(x[52], 1000.0)
set_upper_bound(x[53], 1000.0)
set_upper_bound(x[54], 1000.0)
set_upper_bound(x[55], 1000.0)
set_upper_bound(x[56], 1000.0)
set_upper_bound(x[57], 1000.0)
set_upper_bound(x[58], 1000.0)
set_upper_bound(x[59], 1000.0)
set_upper_bound(x[60], 1000.0)
set_upper_bound(x[61], 1000.0)
set_upper_bound(x[62], 1000.0)
set_upper_bound(x[63], 1000.0)
set_upper_bound(x[64], 1000.0)
set_upper_bound(x[65], 1000.0)
set_upper_bound(x[66], 1000.0)
set_upper_bound(x[67], 1000.0)
set_upper_bound(x[68], 10.0)
set_upper_bound(x[69], 10.0)
set_upper_bound(x[70], 10000.0)
set_upper_bound(x[71], 10000.0)
set_upper_bound(x[72], 10000.0)
set_upper_bound(x[73], 10000.0)
set_upper_bound(x[74], 10000.0)
set_upper_bound(x[75], 10000.0)
set_upper_bound(x[76], 10000.0)
set_upper_bound(x[77], 10000.0)
set_upper_bound(x[78], 10000.0)
set_upper_bound(x[79], 10000.0)


# ----- Constraints ----- #
@constraint(m, e1, -objvar-x[69] == 0.0)
@constraint(m, e2, -x[2]-x[3]-x[4]-x[5]-x[6] == -100.0)
@constraint(m, e3, -x[2]+x[7]-x[37]-x[42]-x[47]-x[52]-x[57] == 0.0)
@constraint(m, e4, -x[3]+x[8]-x[38]-x[43]-x[48]-x[53]-x[58] == 0.0)
@constraint(m, e5, -x[4]+x[9]-x[39]-x[44]-x[49]-x[54]-x[59] == 0.0)
@constraint(m, e6, -x[5]+x[10]-x[40]-x[45]-x[50]-x[55]-x[60] == 0.0)
@constraint(m, e7, -x[6]+x[11]-x[41]-x[46]-x[51]-x[56]-x[61] == 0.0)
@NLconstraint(m, e8, x[12]*x[7]-(x[27]*x[37]+x[29]*x[42]+x[31]*x[47]+x[33]*x[52]+x[35]*x[57])-0.45*x[2] == 0.0)
@NLconstraint(m, e9, x[13]*x[7]-(x[28]*x[37]+x[30]*x[42]+x[32]*x[47]+x[34]*x[52]+x[36]*x[57])-0.55*x[2] == 0.0)
@NLconstraint(m, e10, x[14]*x[8]-(x[27]*x[38]+x[29]*x[43]+x[31]*x[48]+x[33]*x[53]+x[35]*x[58])-0.45*x[3] == 0.0)
@NLconstraint(m, e11, x[15]*x[8]-(x[28]*x[38]+x[30]*x[43]+x[32]*x[48]+x[34]*x[53]+x[36]*x[58])-0.55*x[3] == 0.0)
@NLconstraint(m, e12, x[16]*x[9]-(x[27]*x[39]+x[29]*x[44]+x[31]*x[49]+x[33]*x[54]+x[35]*x[59])-0.45*x[4] == 0.0)
@NLconstraint(m, e13, x[17]*x[9]-(x[28]*x[39]+x[30]*x[44]+x[32]*x[49]+x[34]*x[54]+x[36]*x[59])-0.55*x[4] == 0.0)
@NLconstraint(m, e14, x[18]*x[10]-(x[27]*x[40]+x[29]*x[45]+x[31]*x[50]+x[33]*x[55]+x[35]*x[60])-0.45*x[5] == 0.0)
@NLconstraint(m, e15, x[19]*x[10]-(x[28]*x[40]+x[30]*x[45]+x[32]*x[50]+x[34]*x[55]+x[36]*x[60])-0.55*x[5] == 0.0)
@NLconstraint(m, e16, x[20]*x[11]-(x[27]*x[41]+x[29]*x[46]+x[31]*x[51]+x[33]*x[56]+x[35]*x[61])-0.45*x[6] == 0.0)
@NLconstraint(m, e17, x[21]*x[11]-(x[28]*x[41]+x[30]*x[46]+x[32]*x[51]+x[34]*x[56]+x[36]*x[61])-0.55*x[6] == 0.0)
@constraint(m, e18, -x[7]+x[22] == 0.0)
@constraint(m, e19, -x[8]+x[23] == 0.0)
@constraint(m, e20, -x[9]+x[24] == 0.0)
@constraint(m, e21, -x[10]+x[25] == 0.0)
@constraint(m, e22, -x[11]+x[26] == 0.0)
@NLconstraint(m, e23, x[27]*x[22]-(x[12]*x[7]-x[70]*x[75]) == 0.0)
@NLconstraint(m, e24, x[28]*x[22]-(x[13]*x[7]+x[70]*x[75]) == 0.0)
@NLconstraint(m, e25, x[29]*x[23]-(x[14]*x[8]-x[71]*x[76]) == 0.0)
@NLconstraint(m, e26, x[30]*x[23]-(x[15]*x[8]+x[71]*x[76]) == 0.0)
@NLconstraint(m, e27, x[31]*x[24]-(x[16]*x[9]-x[72]*x[77]) == 0.0)
@NLconstraint(m, e28, x[32]*x[24]-(x[17]*x[9]+x[72]*x[77]) == 0.0)
@NLconstraint(m, e29, x[33]*x[25]-(x[18]*x[10]-x[73]*x[78]) == 0.0)
@NLconstraint(m, e30, x[34]*x[25]-(x[19]*x[10]+x[73]*x[78]) == 0.0)
@NLconstraint(m, e31, x[35]*x[26]-(x[20]*x[11]-x[74]*x[79]) == 0.0)
@NLconstraint(m, e32, x[36]*x[26]-(x[21]*x[11]+x[74]*x[79]) == 0.0)
@NLconstraint(m, e33, -x[27]*x[28]+x[75] == 0.0)
@NLconstraint(m, e34, -x[29]*x[30]+x[76] == 0.0)
@NLconstraint(m, e35, -x[31]*x[32]+x[77] == 0.0)
@NLconstraint(m, e36, -x[33]*x[34]+x[78] == 0.0)
@NLconstraint(m, e37, -x[35]*x[36]+x[79] == 0.0)
@constraint(m, e38, x[22]-x[37]-x[38]-x[39]-x[40]-x[41]-x[62] == 0.0)
@constraint(m, e39, x[23]-x[42]-x[43]-x[44]-x[45]-x[46]-x[63] == 0.0)
@constraint(m, e40, x[24]-x[47]-x[48]-x[49]-x[50]-x[51]-x[64] == 0.0)
@constraint(m, e41, x[25]-x[52]-x[53]-x[54]-x[55]-x[56]-x[65] == 0.0)
@constraint(m, e42, x[26]-x[57]-x[58]-x[59]-x[60]-x[61]-x[66] == 0.0)
@constraint(m, e43, -x[62]-x[63]-x[64]-x[65]-x[66]+x[67] == 0.0)
@NLconstraint(m, e44, x[67]*x[68]-(x[62]*x[27]+x[63]*x[29]+x[64]*x[31]+x[65]*x[33]+x[66]*x[35]) == 0.0)
@NLconstraint(m, e45, x[67]*x[69]-(x[62]*x[28]+x[63]*x[30]+x[64]*x[32]+x[65]*x[34]+x[66]*x[36]) == 0.0)
@constraint(m, e46, x[70]+x[71]+x[72]+x[73]+x[74] == 100.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.