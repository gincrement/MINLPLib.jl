using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
@variable(m, x[x_Idx])
i_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
@variable(m, i[i_Idx])
set_integer(i[8])
set_lower_bound(i[8], 0.0)
set_upper_bound(i[8], 100.0)
set_integer(i[5])
set_lower_bound(i[5], 0.0)
set_upper_bound(i[5], 100.0)
set_integer(i[4])
set_lower_bound(i[4], 0.0)
set_upper_bound(i[4], 100.0)
set_integer(i[7])
set_lower_bound(i[7], 0.0)
set_upper_bound(i[7], 100.0)
set_integer(i[3])
set_lower_bound(i[3], 0.0)
set_upper_bound(i[3], 100.0)
set_integer(i[9])
set_lower_bound(i[9], 0.0)
set_upper_bound(i[9], 100.0)
set_integer(i[1])
set_lower_bound(i[1], 0.0)
set_upper_bound(i[1], 100.0)
set_integer(i[10])
set_lower_bound(i[10], 0.0)
set_upper_bound(i[10], 100.0)
set_integer(i[2])
set_lower_bound(i[2], 0.0)
set_upper_bound(i[2], 100.0)
set_integer(i[6])
set_lower_bound(i[6], 0.0)
set_upper_bound(i[6], 100.0)
set_lower_bound(i[1], 1.0)
set_upper_bound(i[1], 10.0)
set_lower_bound(i[2], 1.0)
set_upper_bound(i[2], 10.0)
set_lower_bound(i[3], 1.0)
set_upper_bound(i[3], 10.0)
set_lower_bound(i[4], 1.0)
set_upper_bound(i[4], 10.0)
set_lower_bound(i[5], 1.0)
set_upper_bound(i[5], 10.0)
set_lower_bound(i[6], 1.0)
set_upper_bound(i[6], 10.0)
set_lower_bound(i[7], 1.0)
set_upper_bound(i[7], 10.0)
set_lower_bound(i[8], 1.0)
set_upper_bound(i[8], 10.0)
set_lower_bound(i[9], 1.0)
set_upper_bound(i[9], 10.0)
set_lower_bound(i[10], 1.0)
set_upper_bound(i[10], 10.0)
set_lower_bound(x[11], 1.0)
set_upper_bound(x[11], 10.0)
set_lower_bound(x[12], 1.0)
set_upper_bound(x[12], 10.0)
set_lower_bound(x[13], 1.0)
set_upper_bound(x[13], 10.0)
set_lower_bound(x[14], 1.0)
set_upper_bound(x[14], 10.0)
set_lower_bound(x[15], 1.0)
set_upper_bound(x[15], 10.0)
set_lower_bound(x[16], 1.0)
set_upper_bound(x[16], 10.0)
set_lower_bound(x[17], 1.0)
set_upper_bound(x[17], 10.0)
set_lower_bound(x[18], 1.0)
set_upper_bound(x[18], 10.0)
set_lower_bound(x[19], 1.0)
set_upper_bound(x[19], 10.0)
set_lower_bound(x[20], 1.0)
set_upper_bound(x[20], 10.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, 20000*i[1]^(-0.32)*i[2]^(-0.19)*i[3]^(-0.405)*i[4]^(-0.265)*i[5]^(-0.175)*i[6]^(-0.44)*i[7]^(-0.275)*i[8]^(-0.47)*i[9]^(-0.31)*i[10]^(-0.295)*x[11]^(-0.105)*x[12]^(-0.15)*x[13]^(-0.235)*x[14]^(-0.115)*x[15]^(-0.42)*x[16]^(-0.095)*x[17]^(-0.115)*x[18]^(-0.085)*x[19]^(-0.115)*x[20]^(-0.22)+i[1]+i[2]+i[3]+i[4]+i[5]+i[6]+i[7]+i[8]+i[9]+i[10]+x[11]+x[12]+x[13]+x[14]+x[15]+x[16]+x[17]+x[18]+x[19]+x[20]-objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.