using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
@variable(m, x[x_Idx])
set_lower_bound(x[36], 0.0)
set_lower_bound(x[4], 0.0)
set_lower_bound(x[16], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[32], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[34], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[37], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[31], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[33], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[35], 0.0)
set_lower_bound(x[10], 0.0)
set_upper_bound(x[2], 1.0)
set_upper_bound(x[3], 1.0)
set_upper_bound(x[4], 1.0)
set_upper_bound(x[5], 1.0)
set_upper_bound(x[6], 100.0)
set_upper_bound(x[7], 200.0)
set_upper_bound(x[8], 100.0)
set_upper_bound(x[9], 200.0)
set_upper_bound(x[10], 100.0)
set_upper_bound(x[11], 200.0)
set_upper_bound(x[12], 100.0)
set_upper_bound(x[13], 200.0)
set_upper_bound(x[14], 100.0)
set_upper_bound(x[15], 200.0)
set_upper_bound(x[16], 100.0)
set_upper_bound(x[17], 200.0)
set_upper_bound(x[18], 100.0)
set_upper_bound(x[19], 200.0)
set_upper_bound(x[20], 100.0)
set_upper_bound(x[21], 200.0)
set_upper_bound(x[22], 100.0)
set_upper_bound(x[23], 200.0)
set_upper_bound(x[24], 100.0)
set_upper_bound(x[25], 200.0)
set_upper_bound(x[26], 100.0)
set_upper_bound(x[27], 200.0)
set_upper_bound(x[28], 100.0)
set_upper_bound(x[29], 200.0)
set_upper_bound(x[30], 100.0)
set_upper_bound(x[31], 200.0)
set_upper_bound(x[32], 100.0)
set_upper_bound(x[33], 200.0)
set_upper_bound(x[34], 100.0)
set_upper_bound(x[35], 200.0)
set_upper_bound(x[36], 100.0)
set_upper_bound(x[37], 200.0)


# ----- Constraints ----- #
@constraint(m, e1, objvar-x[6]+5*x[7]-4*x[8]+2*x[9]+2*x[10]+8*x[11]-x[12]+5*x[13]+3*x[22]+9*x[23]+6*x[25]-7*x[26]-x[27]-10*x[28]-4*x[29]+6*x[30]+12*x[31]+3*x[32]+9*x[33]-4*x[34]+2*x[35]-7*x[36]-x[37] == 0.0)
@constraint(m, e2, x[22]+x[23]+x[24]+x[25] <= 600.0)
@constraint(m, e3, x[26]+x[27]+x[28]+x[29] <= 600.0)
@constraint(m, e4, x[6]+x[7]+x[8]+x[9] <= 600.0)
@constraint(m, e5, x[30]+x[31]+x[32]+x[33] <= 600.0)
@constraint(m, e6, x[34]+x[35]+x[36]+x[37] <= 600.0)
@constraint(m, e7, x[10]+x[11]+x[12]+x[13] <= 600.0)
@constraint(m, e8, x[22]+x[23]+x[24]+x[25]+x[26]+x[27]+x[28]+x[29] <= 600.0)
@constraint(m, e9, x[30]+x[31]+x[32]+x[33]+x[34]+x[35]+x[36]+x[37] <= 600.0)
@constraint(m, e10, x[6]+x[10]+x[22]+x[26]+x[30]+x[34] <= 100.0)
@constraint(m, e11, x[7]+x[11]+x[23]+x[27]+x[31]+x[35] <= 200.0)
@constraint(m, e12, x[8]+x[12]+x[24]+x[28]+x[32]+x[36] <= 100.0)
@constraint(m, e13, x[9]+x[13]+x[25]+x[29]+x[33]+x[37] <= 200.0)
@constraint(m, e14, -0.5*x[6]+0.5*x[22]-1.5*x[26]+x[30]-x[34] <= 0.0)
@constraint(m, e15, 0.5*x[7]+x[11]+1.5*x[23]-0.5*x[27]+2*x[31] <= 0.0)
@constraint(m, e16, -x[8]-0.5*x[12]-2*x[28]+0.5*x[32]-1.5*x[36] <= 0.0)
@constraint(m, e17, 0.5*x[13]+x[25]-x[29]+1.5*x[33]-0.5*x[37] <= 0.0)
@constraint(m, e18, x[2]+x[3] == 1.0)
@constraint(m, e19, x[4]+x[5] == 1.0)
@NLconstraint(m, e20, -x[2]*x[14]+x[22] == 0.0)
@NLconstraint(m, e21, -x[2]*x[15]+x[23] == 0.0)
@NLconstraint(m, e22, -x[2]*x[16]+x[24] == 0.0)
@NLconstraint(m, e23, -x[2]*x[17]+x[25] == 0.0)
@NLconstraint(m, e24, -x[3]*x[14]+x[26] == 0.0)
@NLconstraint(m, e25, -x[3]*x[15]+x[27] == 0.0)
@NLconstraint(m, e26, -x[3]*x[16]+x[28] == 0.0)
@NLconstraint(m, e27, -x[3]*x[17]+x[29] == 0.0)
@NLconstraint(m, e28, -x[4]*x[18]+x[30] == 0.0)
@NLconstraint(m, e29, -x[4]*x[19]+x[31] == 0.0)
@NLconstraint(m, e30, -x[4]*x[20]+x[32] == 0.0)
@NLconstraint(m, e31, -x[4]*x[21]+x[33] == 0.0)
@NLconstraint(m, e32, -x[5]*x[18]+x[34] == 0.0)
@NLconstraint(m, e33, -x[5]*x[19]+x[35] == 0.0)
@NLconstraint(m, e34, -x[5]*x[20]+x[36] == 0.0)
@NLconstraint(m, e35, -x[5]*x[21]+x[37] == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.