using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
@variable(m, x[x_Idx])
set_lower_bound(x[1], -18.999999)
set_upper_bound(x[1], 18.999999)
set_lower_bound(x[2], -18.999999)
set_upper_bound(x[2], 18.999999)
set_lower_bound(x[3], -18.999999)
set_upper_bound(x[3], 18.999999)
set_lower_bound(x[4], -18.999999)
set_upper_bound(x[4], 18.999999)
set_lower_bound(x[5], -18.999999)
set_upper_bound(x[5], 18.999999)
set_lower_bound(x[6], -18.999999)
set_upper_bound(x[6], 18.999999)
set_lower_bound(x[7], -18.999999)
set_upper_bound(x[7], 18.999999)
set_lower_bound(x[8], -18.999999)
set_upper_bound(x[8], 18.999999)
set_lower_bound(x[9], -18.999999)
set_upper_bound(x[9], 18.999999)
set_lower_bound(x[10], -18.999999)
set_upper_bound(x[10], 18.999999)
set_lower_bound(x[11], -18.999999)
set_upper_bound(x[11], 18.999999)
set_lower_bound(x[12], -18.999999)
set_upper_bound(x[12], 18.999999)
set_lower_bound(x[13], -18.999999)
set_upper_bound(x[13], 18.999999)
set_lower_bound(x[14], -18.999999)
set_upper_bound(x[14], 18.999999)
set_lower_bound(x[15], -18.999999)
set_upper_bound(x[15], 18.999999)
set_lower_bound(x[16], -18.999999)
set_upper_bound(x[16], 18.999999)


# ----- Constraints ----- #
@NLconstraint(m, e1, -sqrt( (x[1]-x[2])^2+ (x[9]-x[10])^2) <= -2.995353)
@NLconstraint(m, e2, -sqrt( (x[1]-x[3])^2+ (x[9]-x[11])^2) <= -2.532248)
@NLconstraint(m, e3, -sqrt( (x[1]-x[4])^2+ (x[9]-x[12])^2) <= -2.638959)
@NLconstraint(m, e4, -sqrt( (x[1]-x[5])^2+ (x[9]-x[13])^2) <= -2.638959)
@NLconstraint(m, e5, -sqrt( (x[1]-x[6])^2+ (x[9]-x[14])^2) <= -2.121321)
@NLconstraint(m, e6, -sqrt( (x[1]-x[7])^2+ (x[9]-x[15])^2) <= -1.914214)
@NLconstraint(m, e7, -sqrt( (x[1]-x[8])^2+ (x[9]-x[16])^2) <= -2.828428)
@NLconstraint(m, e8, -sqrt( (x[2]-x[3])^2+ (x[10]-x[11])^2) <= -2.699173)
@NLconstraint(m, e9, -sqrt( (x[2]-x[4])^2+ (x[10]-x[12])^2) <= -2.805884)
@NLconstraint(m, e10, -sqrt( (x[2]-x[5])^2+ (x[10]-x[13])^2) <= -2.805884)
@NLconstraint(m, e11, -sqrt( (x[2]-x[6])^2+ (x[10]-x[14])^2) <= -2.288246)
@NLconstraint(m, e12, -sqrt( (x[2]-x[7])^2+ (x[10]-x[15])^2) <= -2.081139)
@NLconstraint(m, e13, -sqrt( (x[2]-x[8])^2+ (x[10]-x[16])^2) <= -2.995353)
@NLconstraint(m, e14, -sqrt( (x[3]-x[4])^2+ (x[11]-x[12])^2) <= -2.342779)
@NLconstraint(m, e15, -sqrt( (x[3]-x[5])^2+ (x[11]-x[13])^2) <= -2.342779)
@NLconstraint(m, e16, -sqrt( (x[3]-x[6])^2+ (x[11]-x[14])^2) <= -1.825141)
@NLconstraint(m, e17, -sqrt( (x[3]-x[7])^2+ (x[11]-x[15])^2) <= -1.618034)
@NLconstraint(m, e18, -sqrt( (x[3]-x[8])^2+ (x[11]-x[16])^2) <= -2.532248)
@NLconstraint(m, e19, -sqrt( (x[4]-x[5])^2+ (x[12]-x[13])^2) <= -2.44949)
@NLconstraint(m, e20, -sqrt( (x[4]-x[6])^2+ (x[12]-x[14])^2) <= -1.931852)
@NLconstraint(m, e21, -sqrt( (x[4]-x[7])^2+ (x[12]-x[15])^2) <= -1.724745)
@NLconstraint(m, e22, -sqrt( (x[4]-x[8])^2+ (x[12]-x[16])^2) <= -2.638959)
@NLconstraint(m, e23, -sqrt( (x[5]-x[6])^2+ (x[13]-x[14])^2) <= -1.931852)
@NLconstraint(m, e24, -sqrt( (x[5]-x[7])^2+ (x[13]-x[15])^2) <= -1.724745)
@NLconstraint(m, e25, -sqrt( (x[5]-x[8])^2+ (x[13]-x[16])^2) <= -2.638959)
@NLconstraint(m, e26, -sqrt( (x[6]-x[7])^2+ (x[14]-x[15])^2) <= -1.207107)
@NLconstraint(m, e27, -sqrt( (x[6]-x[8])^2+ (x[14]-x[16])^2) <= -2.121321)
@NLconstraint(m, e28, -sqrt( (x[7]-x[8])^2+ (x[15]-x[16])^2) <= -1.914214)
@constraint(m, e29, -x[1] <= 1.210786)
@constraint(m, e30, -x[2] <= 1.043861)
@constraint(m, e31, -x[3] <= 1.506966)
@constraint(m, e32, -x[4] <= 1.400255)
@constraint(m, e33, -x[5] <= 1.400255)
@constraint(m, e34, -x[6] <= 1.917893)
@constraint(m, e35, -x[7] <= 2.125)
@constraint(m, e36, -x[8] <= 1.210786)
@constraint(m, e37, x[1] <= 1.210786)
@constraint(m, e38, x[2] <= 1.043861)
@constraint(m, e39, x[3] <= 1.506966)
@constraint(m, e40, x[4] <= 1.400255)
@constraint(m, e41, x[5] <= 1.400255)
@constraint(m, e42, x[6] <= 1.917893)
@constraint(m, e43, x[7] <= 2.125)
@constraint(m, e44, x[8] <= 1.210786)
@constraint(m, e45, -x[9] <= 3.710786)
@constraint(m, e46, -x[10] <= 3.543861)
@constraint(m, e47, -x[11] <= 4.006966)
@constraint(m, e48, -x[12] <= 3.900255)
@constraint(m, e49, -x[13] <= 3.900255)
@constraint(m, e50, -x[14] <= 4.417893)
@constraint(m, e51, -x[15] <= 4.625)
@constraint(m, e52, -x[16] <= 3.710786)
@constraint(m, e53, x[9] <= 3.710786)
@constraint(m, e54, x[10] <= 3.543861)
@constraint(m, e55, x[11] <= 4.006966)
@constraint(m, e56, x[12] <= 3.900255)
@constraint(m, e57, x[13] <= 3.900255)
@constraint(m, e58, x[14] <= 4.417893)
@constraint(m, e59, x[15] <= 4.625)
@constraint(m, e60, x[16] <= 3.710786)
@NLconstraint(m, e61, 10*x[2]*x[1]-18* (x[1])^2-14* (x[2])^2-18* (x[9])^2+10*x[10]*x[9]-14* (x[10])^2+4*x[3]*x[1]+6*x[3]*x[2]-10* (x[3])^2+4*x[11]*x[9]+6*x[11]*x[10]-10* (x[11])^2+8*x[4]*x[1]-23* (x[4])^2+8*x[12]*x[9]-23* (x[12])^2+2*x[5]*x[1]+4*x[5]*x[2]+10*x[5]*x[4]-18* (x[5])^2+2*x[13]*x[9]+4*x[13]*x[10]+10*x[13]*x[12]-18* (x[13])^2+4*x[6]*x[2]+4*x[6]*x[4]+20*x[6]*x[5]-20* (x[6])^2+4*x[14]*x[10]+4*x[14]*x[12]+20*x[14]*x[13]-20* (x[14])^2+12*x[8]*x[1]+10*x[8]*x[3]+20*x[8]*x[4]+2*x[8]*x[6]-32* (x[8])^2+12*x[16]*x[9]+10*x[16]*x[11]+20*x[16]*x[12]+2*x[16]*x[14]-32* (x[16])^2+4*x[7]*x[2]+4*x[7]*x[4]+10*x[7]*x[6]+20*x[7]*x[8]-19* (x[7])^2+4*x[15]*x[10]+4*x[15]*x[12]+10*x[15]*x[14]+20*x[15]*x[16]-19* (x[15])^2+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.