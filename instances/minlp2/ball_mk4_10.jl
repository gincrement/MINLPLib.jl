using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
i_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
@variable(m, i[i_Idx])
set_integer(i[8])
set_lower_bound(i[8], 0.0)
set_upper_bound(i[8], 100.0)
set_integer(i[21])
set_lower_bound(i[21], 0.0)
set_upper_bound(i[21], 100.0)
set_integer(i[12])
set_lower_bound(i[12], 0.0)
set_upper_bound(i[12], 100.0)
set_integer(i[19])
set_lower_bound(i[19], 0.0)
set_upper_bound(i[19], 100.0)
set_integer(i[5])
set_lower_bound(i[5], 0.0)
set_upper_bound(i[5], 100.0)
set_integer(i[3])
set_lower_bound(i[3], 0.0)
set_upper_bound(i[3], 100.0)
set_integer(i[2])
set_lower_bound(i[2], 0.0)
set_upper_bound(i[2], 100.0)
set_integer(i[13])
set_lower_bound(i[13], 0.0)
set_upper_bound(i[13], 100.0)
set_integer(i[6])
set_lower_bound(i[6], 0.0)
set_upper_bound(i[6], 100.0)
set_integer(i[4])
set_lower_bound(i[4], 0.0)
set_upper_bound(i[4], 100.0)
set_integer(i[9])
set_lower_bound(i[9], 0.0)
set_upper_bound(i[9], 100.0)
set_integer(i[14])
set_lower_bound(i[14], 0.0)
set_upper_bound(i[14], 100.0)
set_integer(i[16])
set_lower_bound(i[16], 0.0)
set_upper_bound(i[16], 100.0)
set_integer(i[10])
set_lower_bound(i[10], 0.0)
set_upper_bound(i[10], 100.0)
set_integer(i[15])
set_lower_bound(i[15], 0.0)
set_upper_bound(i[15], 100.0)
set_integer(i[17])
set_lower_bound(i[17], 0.0)
set_upper_bound(i[17], 100.0)
set_integer(i[7])
set_lower_bound(i[7], 0.0)
set_upper_bound(i[7], 100.0)
set_integer(i[20])
set_lower_bound(i[20], 0.0)
set_upper_bound(i[20], 100.0)
set_integer(i[11])
set_lower_bound(i[11], 0.0)
set_upper_bound(i[11], 100.0)
set_integer(i[18])
set_lower_bound(i[18], 0.0)
set_upper_bound(i[18], 100.0)
set_lower_bound(i[2], -100.0)
set_lower_bound(i[3], -100.0)
set_lower_bound(i[4], -100.0)
set_lower_bound(i[5], -100.0)
set_lower_bound(i[6], -100.0)
set_lower_bound(i[7], -100.0)
set_lower_bound(i[8], -100.0)
set_lower_bound(i[9], -100.0)
set_lower_bound(i[10], -100.0)
set_lower_bound(i[11], -100.0)
set_lower_bound(i[12], -100.0)
set_lower_bound(i[13], -100.0)
set_lower_bound(i[14], -100.0)
set_lower_bound(i[15], -100.0)
set_lower_bound(i[16], -100.0)
set_lower_bound(i[17], -100.0)
set_lower_bound(i[18], -100.0)
set_lower_bound(i[19], -100.0)
set_lower_bound(i[20], -100.0)
set_lower_bound(i[21], -100.0)


# ----- Constraints ----- #
@constraint(m, e1, objvar-19*i[2]-18*i[3]-17*i[4]-16*i[5]-15*i[6]-14*i[7]-13*i[8]-12*i[9]-11*i[10]-10*i[11]-9*i[12]-8*i[13]-7*i[14]-6*i[15]-5*i[16]-4*i[17]-3*i[18]-2*i[19]-i[20]-20*i[21] == 0.0)
@NLconstraint(m, e2, 100* (i[20])^2-98*i[20]+100* (i[19])^2-98*i[19]+100* (i[18])^2-98*i[18]+100* (i[17])^2-98*i[17]+100* (i[16])^2-98*i[16]+100* (i[15])^2-98*i[15]+100* (i[14])^2-98*i[14]+100* (i[13])^2-98*i[13]+100* (i[12])^2-98*i[12]+100* (i[11])^2-98*i[11]+100* (i[10])^2-98*i[10]+100* (i[9])^2-98*i[9]+100* (i[8])^2-98*i[8]+100* (i[7])^2-98*i[7]+100* (i[6])^2-98*i[6]+100* (i[5])^2-98*i[5]+100* (i[4])^2-98*i[4]+100* (i[3])^2-98*i[3]+100* (i[2])^2-98*i[2]+100* (i[21])^2-98*i[21]-2*i[20]*i[19]-2*i[20]*i[19]-2*i[18]*i[17]-2*i[18]*i[17]-2*i[16]*i[15]-2*i[16]*i[15]-2*i[14]*i[13]-2*i[14]*i[13]-2*i[12]*i[11]-2*i[12]*i[11]-2*i[10]*i[9]-2*i[10]*i[9]-2*i[8]*i[7]-2*i[8]*i[7]-2*i[6]*i[5]-2*i[6]*i[5]-2*i[4]*i[3]-2*i[4]*i[3]-2*i[2]*i[21]-2*i[2]*i[21] <= -1.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.