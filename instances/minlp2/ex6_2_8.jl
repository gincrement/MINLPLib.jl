using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[2, 3, 4]
@variable(m, x[x_Idx])
set_lower_bound(x[2], 1.0e-6)
set_upper_bound(x[2], 1.0)
set_lower_bound(x[3], 1.0e-6)
set_upper_bound(x[3], 1.0)
set_lower_bound(x[4], 1.0e-6)
set_upper_bound(x[4], 1.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, -(log(2.4088*x[2]+8.8495*x[3]+2.0086*x[4])*(10.4807341082197*x[2]+38.5043409542885*x[3]+8.73945638067505*x[4])+0.303602206615077*x[2]-3.98949602721008*x[3]+0.0423576909050935*x[4]+0.240734108219679*log(x[2])*x[2]+2.64434095428848*log(x[3])*x[3]+0.399456380675047*log(x[4])*x[4]-0.240734108219679*log(2.4088*x[2]+8.8495*x[3]+2.0086*x[4])*x[2]-2.64434095428848*log(2.4088*x[2]+8.8495*x[3]+2.0086*x[4])*x[3]-0.399456380675047*log(2.4088*x[2]+8.8495*x[3]+2.0086*x[4])*x[4]+11.24*log(x[2])*x[2]+36.86*log(x[3])*x[3]+9.34*log(x[4])*x[4]-11.24*log(2.248*x[2]+7.372*x[3]+1.868*x[4])*x[2]-36.86*log(2.248*x[2]+7.372*x[3]+1.868*x[4])*x[3]-9.34*log(2.248*x[2]+7.372*x[3]+1.868*x[4])*x[4]+log(2.248*x[2]+7.372*x[3]+1.868*x[4])*(2.248*x[2]+7.372*x[3]+1.868*x[4])+2.248*log(x[2])*x[2]+7.372*log(x[3])*x[3]+1.868*log(x[4])*x[4]-2.248*log(2.248*x[2]+5.82088173817021*x[3]+0.382446861901943*x[4])*x[2]-7.372*log(0.972461133672523*x[2]+7.372*x[3]+1.1893141713454*x[4])*x[3]-1.868*log(1.86752460515164*x[2]+2.61699842799583*x[3]+1.868*x[4])*x[4]-12.7287341082197*log(x[2])*x[2]-45.8763409542885*log(x[3])*x[3]-10.607456380675*log(x[4])*x[4])+objvar == 0.0)
@constraint(m, e2, x[2]+x[3]+x[4] == 1.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.