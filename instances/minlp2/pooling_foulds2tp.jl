using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
@variable(m, x[x_Idx])
set_lower_bound(x[36], 0.0)
set_lower_bound(x[4], 0.0)
set_lower_bound(x[16], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[32], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[34], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[37], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[31], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[33], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[35], 0.0)
set_lower_bound(x[10], 0.0)
set_upper_bound(x[2], 1.0)
set_upper_bound(x[3], 1.0)
set_upper_bound(x[4], 1.0)
set_upper_bound(x[5], 1.0)
set_upper_bound(x[6], 1.0)
set_upper_bound(x[7], 1.0)
set_upper_bound(x[8], 1.0)
set_upper_bound(x[9], 1.0)
set_upper_bound(x[10], 100.0)
set_upper_bound(x[11], 200.0)
set_upper_bound(x[12], 100.0)
set_upper_bound(x[13], 200.0)
set_upper_bound(x[14], 100.0)
set_upper_bound(x[15], 200.0)
set_upper_bound(x[16], 100.0)
set_upper_bound(x[17], 200.0)
set_upper_bound(x[18], 100.0)
set_upper_bound(x[19], 200.0)
set_upper_bound(x[20], 100.0)
set_upper_bound(x[21], 200.0)
set_upper_bound(x[22], 100.0)
set_upper_bound(x[23], 200.0)
set_upper_bound(x[24], 100.0)
set_upper_bound(x[25], 200.0)
set_upper_bound(x[26], 600.0)
set_upper_bound(x[27], 600.0)
set_upper_bound(x[28], 100.0)
set_upper_bound(x[29], 200.0)
set_upper_bound(x[30], 100.0)
set_upper_bound(x[31], 200.0)
set_upper_bound(x[32], 600.0)
set_upper_bound(x[33], 600.0)
set_upper_bound(x[34], 100.0)
set_upper_bound(x[35], 200.0)
set_upper_bound(x[36], 100.0)
set_upper_bound(x[37], 200.0)


# ----- Constraints ----- #
@constraint(m, e1, objvar+3*x[10]+9*x[11]+6*x[13]-7*x[14]-x[15]-10*x[16]-4*x[17]+6*x[18]+12*x[19]+3*x[20]+9*x[21]-4*x[22]+2*x[23]-7*x[24]-x[25]-x[28]+5*x[29]-4*x[30]+2*x[31]+2*x[34]+8*x[35]-x[36]+5*x[37] == 0.0)
@constraint(m, e2, x[10]+x[11]+x[12]+x[13] <= 600.0)
@constraint(m, e3, x[14]+x[15]+x[16]+x[17] <= 600.0)
@constraint(m, e4, x[28]+x[29]+x[30]+x[31] <= 600.0)
@constraint(m, e5, x[18]+x[19]+x[20]+x[21] <= 600.0)
@constraint(m, e6, x[22]+x[23]+x[24]+x[25] <= 600.0)
@constraint(m, e7, x[34]+x[35]+x[36]+x[37] <= 600.0)
@constraint(m, e8, x[10]+x[11]+x[12]+x[13]+x[14]+x[15]+x[16]+x[17] <= 600.0)
@constraint(m, e9, x[18]+x[19]+x[20]+x[21]+x[22]+x[23]+x[24]+x[25] <= 600.0)
@constraint(m, e10, x[10]+x[14]+x[18]+x[22]+x[28]+x[34] <= 100.0)
@constraint(m, e11, x[11]+x[15]+x[19]+x[23]+x[29]+x[35] <= 200.0)
@constraint(m, e12, x[12]+x[16]+x[20]+x[24]+x[30]+x[36] <= 100.0)
@constraint(m, e13, x[13]+x[17]+x[21]+x[25]+x[31]+x[37] <= 200.0)
@constraint(m, e14, 0.5*x[10]-1.5*x[14]+x[18]-x[22]-0.5*x[28] <= 0.0)
@constraint(m, e15, 1.5*x[11]-0.5*x[15]+2*x[19]+0.5*x[29]+x[35] <= 0.0)
@constraint(m, e16, -2*x[16]+0.5*x[20]-1.5*x[24]-x[30]-0.5*x[36] <= 0.0)
@constraint(m, e17, x[13]-x[17]+1.5*x[21]-0.5*x[25]+0.5*x[37] <= 0.0)
@constraint(m, e18, x[2]+x[3]+x[4]+x[5] == 1.0)
@constraint(m, e19, x[6]+x[7]+x[8]+x[9] == 1.0)
@NLconstraint(m, e20, -x[2]*x[26]+x[10] == 0.0)
@NLconstraint(m, e21, -x[3]*x[26]+x[11] == 0.0)
@NLconstraint(m, e22, -x[4]*x[26]+x[12] == 0.0)
@NLconstraint(m, e23, -x[5]*x[26]+x[13] == 0.0)
@NLconstraint(m, e24, -x[2]*x[27]+x[14] == 0.0)
@NLconstraint(m, e25, -x[3]*x[27]+x[15] == 0.0)
@NLconstraint(m, e26, -x[4]*x[27]+x[16] == 0.0)
@NLconstraint(m, e27, -x[5]*x[27]+x[17] == 0.0)
@NLconstraint(m, e28, -x[6]*x[32]+x[18] == 0.0)
@NLconstraint(m, e29, -x[7]*x[32]+x[19] == 0.0)
@NLconstraint(m, e30, -x[8]*x[32]+x[20] == 0.0)
@NLconstraint(m, e31, -x[9]*x[32]+x[21] == 0.0)
@NLconstraint(m, e32, -x[6]*x[33]+x[22] == 0.0)
@NLconstraint(m, e33, -x[7]*x[33]+x[23] == 0.0)
@NLconstraint(m, e34, -x[8]*x[33]+x[24] == 0.0)
@NLconstraint(m, e35, -x[9]*x[33]+x[25] == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.