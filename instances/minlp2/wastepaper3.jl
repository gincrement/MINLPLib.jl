using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
@variable(m, x[x_Idx])
b_Idx = Any[27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]
@variable(m, b[b_Idx])
set_binary(b[35])
set_binary(b[38])
set_binary(b[44])
set_lower_bound(x[16], 0.0)
set_lower_bound(x[14], 0.0)
set_binary(b[42])
set_lower_bound(x[22], 0.0)
set_binary(b[49])
set_binary(b[45])
set_binary(b[41])
set_binary(b[48])
set_lower_bound(x[9], 0.0)
set_lower_bound(x[8], 0.0)
set_binary(b[28])
set_binary(b[36])
set_lower_bound(x[25], 0.0)
set_binary(b[46])
set_binary(b[53])
set_binary(b[33])
set_lower_bound(x[11], 0.0)
set_binary(b[30])
set_binary(b[29])
set_binary(b[40])
set_lower_bound(x[5], 0.0)
set_binary(b[32])
set_binary(b[34])
set_lower_bound(x[24], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[10], 0.0)
set_binary(b[51])
set_lower_bound(x[26], 0.0)
set_binary(b[43])
set_binary(b[47])
set_lower_bound(x[12], 0.0)
set_binary(b[39])
set_binary(b[37])
set_binary(b[50])
set_binary(b[27])
set_lower_bound(x[6], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[23], 0.0)
set_binary(b[31])
set_lower_bound(x[19], 0.0)
set_binary(b[52])
set_lower_bound(x[20], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[2], 0.1)
set_upper_bound(x[2], 0.9)
set_lower_bound(x[3], 0.1)
set_upper_bound(x[3], 0.9)
set_lower_bound(x[4], 0.1)
set_upper_bound(x[4], 0.9)
set_upper_bound(x[5], 10.0)
set_upper_bound(x[6], 10.0)
set_upper_bound(x[7], 10.0)
set_upper_bound(x[8], 10.0)
set_upper_bound(x[9], 10.0)
set_upper_bound(x[10], 10.0)
set_upper_bound(x[11], 10.0)
set_upper_bound(x[12], 10.0)
set_upper_bound(x[13], 10.0)
set_upper_bound(x[14], 10.0)
set_upper_bound(x[15], 10.0)
set_upper_bound(x[16], 10.0)
set_upper_bound(x[17], 10.0)
set_upper_bound(x[18], 10.0)
set_upper_bound(x[19], 10.0)
set_upper_bound(x[20], 10.0)
set_upper_bound(x[21], 10.0)
set_upper_bound(x[22], 10.0)
set_upper_bound(x[23], 10.0)
set_upper_bound(x[24], 10.0)
set_upper_bound(x[25], 10.0)
set_upper_bound(x[26], 10.0)


# ----- Constraints ----- #
@constraint(m, e1, objvar-x[17] == 0.0)
@constraint(m, e2, x[5] <= 0.0675)
@constraint(m, e3, x[7]-x[8]+x[9] == 0.0)
@constraint(m, e4, x[10]-x[11]+x[12] == 0.0)
@constraint(m, e5, x[13]-x[14]+x[15] == 0.0)
@constraint(m, e6, x[18]-x[19]+x[20] == 0.0)
@constraint(m, e7, x[21]-x[22]+x[23] == 0.0)
@constraint(m, e8, x[24]-x[25]+x[26] == 0.0)
@NLconstraint(m, e9, x[2]^0.29*x[8]-x[9] == 0.0)
@NLconstraint(m, e10, x[3]^0.13*x[11]-x[12] == 0.0)
@NLconstraint(m, e11, x[4]^0.06*x[14]-x[15] == 0.0)
@NLconstraint(m, e12, x[2]^0.74*x[19]-x[20] == 0.0)
@NLconstraint(m, e13, x[3]^0.79*x[22]-x[23] == 0.0)
@NLconstraint(m, e14, x[4]^0.71*x[25]-x[26] == 0.0)
@NLconstraint(m, e15, b[27]*x[7]+b[30]*x[9]+b[33]*x[10]+b[36]*x[12]+b[39]*x[13]+b[42]*x[15]-x[8]+0.675*b[45] == 0.0)
@NLconstraint(m, e16, b[28]*x[7]+b[31]*x[9]+b[34]*x[10]+b[37]*x[12]+b[40]*x[13]+b[43]*x[15]-x[11]+0.675*b[46] == 0.0)
@NLconstraint(m, e17, b[29]*x[7]+b[32]*x[9]+b[35]*x[10]+b[38]*x[12]+b[41]*x[13]+b[44]*x[15]-x[14]+0.675*b[47] == 0.0)
@NLconstraint(m, e18, b[27]*x[18]+b[30]*x[20]+b[33]*x[21]+b[36]*x[23]+b[39]*x[24]+b[42]*x[26]-x[19]+0.649*b[45] == 0.0)
@NLconstraint(m, e19, b[28]*x[18]+b[31]*x[20]+b[34]*x[21]+b[37]*x[23]+b[40]*x[24]+b[43]*x[26]-x[22]+0.649*b[46] == 0.0)
@NLconstraint(m, e20, b[29]*x[18]+b[32]*x[20]+b[35]*x[21]+b[38]*x[23]+b[41]*x[24]+b[44]*x[26]-x[25]+0.649*b[47] == 0.0)
@NLconstraint(m, e21, b[48]*x[7]+b[49]*x[10]+b[50]*x[13]-x[5] == 0.0)
@NLconstraint(m, e22, b[48]*x[18]+b[49]*x[21]+b[50]*x[24]-x[16] == 0.0)
@NLconstraint(m, e23, b[51]*x[9]+b[52]*x[12]+b[53]*x[15]-x[6] == 0.0)
@NLconstraint(m, e24, b[51]*x[20]+b[52]*x[23]+b[53]*x[26]-x[17] == 0.0)
@constraint(m, e25, b[27]+b[28]+b[29]+b[48] == 1.0)
@constraint(m, e26, b[33]+b[34]+b[35]+b[49] == 1.0)
@constraint(m, e27, b[39]+b[40]+b[41]+b[50] == 1.0)
@constraint(m, e28, b[30]+b[31]+b[32]+b[51] == 1.0)
@constraint(m, e29, b[36]+b[37]+b[38]+b[52] == 1.0)
@constraint(m, e30, b[42]+b[43]+b[44]+b[53] == 1.0)
@constraint(m, e31, b[45]+b[46]+b[47] == 1.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.