using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
@variable(m, x[x_Idx])
set_lower_bound(x[4], 0.0)
set_lower_bound(x[16], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[1], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[10], 0.0)
set_upper_bound(x[1], 1.0e6)
set_upper_bound(x[2], 1.0e6)
set_upper_bound(x[3], 1.0e6)
set_upper_bound(x[4], 1.0e6)
set_upper_bound(x[5], 1.0e6)
set_upper_bound(x[6], 1.0e6)
set_upper_bound(x[7], 1.0e6)
set_upper_bound(x[8], 1.0e6)
set_upper_bound(x[9], 1.0e6)
set_upper_bound(x[10], 1.0e6)
set_upper_bound(x[11], 1.0e6)
set_upper_bound(x[12], 1.0e6)
set_upper_bound(x[13], 1.0e6)
set_upper_bound(x[14], 1.0e6)
set_upper_bound(x[15], 1.0e6)
set_upper_bound(x[16], 1.0e6)
set_upper_bound(x[17], 1.0e6)
set_upper_bound(x[18], 1.0e6)
set_upper_bound(x[19], 1.0e6)
set_upper_bound(x[20], 1.0e6)
set_upper_bound(x[21], 1.0e6)
set_upper_bound(x[22], 1.0e6)
set_upper_bound(x[23], 1.0e6)


# ----- Constraints ----- #
@constraint(m, e1, -x[22]-x[23]+objvar == 0.0)
@constraint(m, e2, -x[13]-x[17]-x[18] == -40.0)
@constraint(m, e3, -x[14]-x[19]-x[20] == -40.0)
@constraint(m, e4, -x[9]-x[11]-x[17]-x[19]+x[22] == 0.0)
@constraint(m, e5, -x[10]-x[12]-x[18]-x[20]+x[23] == 0.0)
@constraint(m, e6, -x[9]-x[10]-x[15]+x[22] == 0.0)
@constraint(m, e7, -x[11]-x[12]-x[16]+x[23] == 0.0)
@constraint(m, e8, -x[13]-x[14]-x[15]-x[16]+x[21] == 0.0)
@NLconstraint(m, e9, x[9]*x[5]+x[11]*x[7]-x[22]*x[1]+100*x[17]+15*x[19] == 0.0)
@NLconstraint(m, e10, x[9]*x[6]+x[11]*x[8]-x[22]*x[2]+20*x[17]+200*x[19] == 0.0)
@NLconstraint(m, e11, x[10]*x[5]+x[12]*x[7]-x[23]*x[3]+100*x[18]+15*x[20] == 0.0)
@NLconstraint(m, e12, x[10]*x[6]+x[12]*x[8]-x[23]*x[4]+20*x[18]+200*x[20] == 0.0)
@constraint(m, e13, x[1] <= 200.0)
@constraint(m, e14, x[2] <= 200.0)
@constraint(m, e15, x[3] <= 200.0)
@constraint(m, e16, x[4] <= 200.0)
@constraint(m, e17, -0.05*x[1]+x[5] == 0.0)
@constraint(m, e18, -x[2]+x[6] == 0.0)
@constraint(m, e19, -x[3]+x[7] == 0.0)
@constraint(m, e20, -0.024*x[4]+x[8] == 0.0)
@NLconstraint(m, e21, x[15]*x[5]+x[16]*x[7]+100*x[13]+15*x[14]-10*x[21] <= 0.0)
@NLconstraint(m, e22, x[15]*x[6]+x[16]*x[8]+20*x[13]+200*x[14]-10*x[21] <= 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.