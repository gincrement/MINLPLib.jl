using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]
@variable(m, x[x_Idx])
b_Idx = Any[17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]
@variable(m, b[b_Idx])
set_binary(b[37])
set_binary(b[35])
set_binary(b[38])
set_binary(b[44])
set_binary(b[27])
set_binary(b[18])
set_binary(b[20])
set_binary(b[33])
set_binary(b[30])
set_binary(b[31])
set_binary(b[42])
set_binary(b[19])
set_binary(b[29])
set_binary(b[25])
set_binary(b[43])
set_binary(b[40])
set_binary(b[41])
set_binary(b[32])
set_binary(b[34])
set_binary(b[24])
set_binary(b[23])
set_lower_bound(x[8], 0.0)
set_binary(b[17])
set_lower_bound(x[13], 0.0)
set_binary(b[39])
set_binary(b[26])
set_binary(b[21])
set_binary(b[28])
set_binary(b[36])
set_binary(b[22])
set_lower_bound(x[1], 3.0)
set_upper_bound(x[1], 20.0)
set_lower_bound(x[2], 55.0)
set_upper_bound(x[2], 68.0)
set_lower_bound(x[3], 29.0)
set_upper_bound(x[3], 38.0)
set_lower_bound(x[4], 12.0)
set_upper_bound(x[4], 22.0)
set_lower_bound(x[5], 5.0)
set_upper_bound(x[5], 16.0)
set_lower_bound(x[6], 82.0)
set_upper_bound(x[6], 91.0)
set_lower_bound(x[7], 94.0)
set_upper_bound(x[7], 105.0)
set_upper_bound(x[8], 17.0)
set_lower_bound(x[9], 16.0)
set_upper_bound(x[9], 38.0)
set_lower_bound(x[10], 97.0)
set_upper_bound(x[10], 114.0)
set_lower_bound(x[11], 57.0)
set_upper_bound(x[11], 68.0)
set_lower_bound(x[12], 108.0)
set_upper_bound(x[12], 125.0)
set_upper_bound(x[13], 23.0)
set_lower_bound(x[14], 7.0)
set_upper_bound(x[14], 25.0)
set_lower_bound(x[15], 48.0)
set_upper_bound(x[15], 74.0)
set_lower_bound(x[16], 88.0)
set_upper_bound(x[16], 112.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, sqrt( (x[1]-x[3])^2+ (x[2]-x[4])^2)*b[17]+sqrt( (x[1]-x[5])^2+ (x[2]-x[6])^2)*b[18]+sqrt( (x[1]-x[7])^2+ (x[2]-x[8])^2)*b[19]+sqrt( (x[1]-x[9])^2+ (x[2]-x[10])^2)*b[20]+sqrt( (x[1]-x[11])^2+ (x[2]-x[12])^2)*b[21]+sqrt( (x[1]-x[13])^2+ (x[2]-x[14])^2)*b[22]+sqrt( (x[1]-x[15])^2+ (x[2]-x[16])^2)*b[23]+sqrt( (x[3]-x[5])^2+ (x[4]-x[6])^2)*b[24]+sqrt( (x[3]-x[7])^2+ (x[4]-x[8])^2)*b[25]+sqrt( (x[3]-x[9])^2+ (x[4]-x[10])^2)*b[26]+sqrt( (x[3]-x[11])^2+ (x[4]-x[12])^2)*b[27]+sqrt( (x[3]-x[13])^2+ (x[4]-x[14])^2)*b[28]+sqrt( (x[3]-x[15])^2+ (x[4]-x[16])^2)*b[29]+sqrt( (x[5]-x[7])^2+ (x[6]-x[8])^2)*b[30]+sqrt( (x[5]-x[9])^2+ (x[6]-x[10])^2)*b[31]+sqrt( (x[5]-x[11])^2+ (x[6]-x[12])^2)*b[32]+sqrt( (x[5]-x[13])^2+ (x[6]-x[14])^2)*b[33]+sqrt( (x[5]-x[15])^2+ (x[6]-x[16])^2)*b[34]+sqrt( (x[7]-x[9])^2+ (x[8]-x[10])^2)*b[35]+sqrt( (x[7]-x[11])^2+ (x[8]-x[12])^2)*b[36]+sqrt( (x[7]-x[13])^2+ (x[8]-x[14])^2)*b[37]+sqrt( (x[7]-x[15])^2+ (x[8]-x[16])^2)*b[38]+sqrt( (x[9]-x[11])^2+ (x[10]-x[12])^2)*b[39]+sqrt( (x[9]-x[13])^2+ (x[10]-x[14])^2)*b[40]+sqrt( (x[9]-x[15])^2+ (x[10]-x[16])^2)*b[41]+sqrt( (x[11]-x[13])^2+ (x[12]-x[14])^2)*b[42]+sqrt( (x[11]-x[15])^2+ (x[12]-x[16])^2)*b[43]+sqrt( (x[13]-x[15])^2+ (x[14]-x[16])^2)*b[44]-objvar == 0.0)
@NLconstraint(m, e2, 0.013840830449827* (x[1])^2-0.318339100346021*x[1]+0.0236686390532544* (x[2])^2-2.9112426035503*x[2] <= -90.3511598861612)
@NLconstraint(m, e3, 0.0493827160493827* (x[3])^2-3.30864197530864*x[3]+0.04* (x[4])^2-1.36*x[4] <= -65.9797530864197)
@NLconstraint(m, e4, 0.0330578512396694* (x[5])^2-0.694214876033058*x[5]+0.0493827160493827* (x[6])^2-8.54320987654321*x[6] <= -372.138455259667)
@NLconstraint(m, e5, 0.0330578512396694* (x[7])^2-6.57851239669422*x[7]+0.013840830449827* (x[8])^2-0.235294117647059*x[8] <= -327.280991735537)
@NLconstraint(m, e6, 0.00826446280991736* (x[9])^2-0.446280991735537*x[9]+0.013840830449827* (x[10])^2-2.92041522491349*x[10] <= -159.076696502617)
@NLconstraint(m, e7, 0.0330578512396694* (x[11])^2-4.13223140495868*x[11]+0.013840830449827* (x[12])^2-3.22491349480969*x[12] <= -315.983442477623)
@NLconstraint(m, e8, 0.00756143667296786* (x[13])^2-0.173913043478261*x[13]+0.0123456790123457* (x[14])^2-0.395061728395062*x[14] <= -3.16049382716049)
@NLconstraint(m, e9, 0.00591715976331361* (x[15])^2-0.72189349112426*x[15]+0.00694444444444444* (x[16])^2-1.38888888888889*x[16] <= -90.4621959237344)
@constraint(m, e10, b[17]+b[18]+b[19]+b[20]+b[21]+b[22]+b[23] == 2.0)
@constraint(m, e11, b[17]+b[24]+b[25]+b[26]+b[27]+b[28]+b[29] == 2.0)
@constraint(m, e12, b[18]+b[24]+b[30]+b[31]+b[32]+b[33]+b[34] == 2.0)
@constraint(m, e13, b[19]+b[25]+b[30]+b[35]+b[36]+b[37]+b[38] == 2.0)
@constraint(m, e14, b[20]+b[26]+b[31]+b[35]+b[39]+b[40]+b[41] == 2.0)
@constraint(m, e15, b[21]+b[27]+b[32]+b[36]+b[39]+b[42]+b[43] == 2.0)
@constraint(m, e16, b[22]+b[28]+b[33]+b[37]+b[40]+b[42]+b[44] == 2.0)
@constraint(m, e17, b[23]+b[29]+b[34]+b[38]+b[41]+b[43]+b[44] == 2.0)
@constraint(m, e18, b[18]+b[20]+b[21]+b[23]+b[31]+b[32]+b[34]+b[39]+b[41]+b[43] <= 4.0)
@constraint(m, e19, b[17]+b[18]+b[19]+b[22]+b[24]+b[25]+b[28]+b[30]+b[33]+b[37] <= 4.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.