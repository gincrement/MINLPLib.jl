using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
@variable(m, x[x_Idx])
set_lower_bound(x[4], 0.0)
set_lower_bound(x[16], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[10], 0.0)
set_upper_bound(x[2], 300.0)
set_upper_bound(x[3], 50.0)
set_upper_bound(x[4], 300.0)
set_upper_bound(x[5], 100.0)
set_upper_bound(x[6], 200.0)
set_upper_bound(x[7], 100.0)
set_upper_bound(x[8], 200.0)
set_upper_bound(x[9], 1.0)
set_upper_bound(x[10], 1.0)
set_upper_bound(x[11], 1.0)
set_upper_bound(x[12], 1.0)
set_upper_bound(x[13], 1.0)
set_upper_bound(x[14], 100.0)
set_upper_bound(x[15], 200.0)
set_upper_bound(x[16], 50.0)
set_upper_bound(x[17], 50.0)
set_upper_bound(x[18], 100.0)
set_upper_bound(x[19], 200.0)


# ----- Constraints ----- #
@constraint(m, e1, objvar-x[5]+5*x[6]+3*x[14]+9*x[15]-6*x[16]-7*x[18]-x[19] == 0.0)
@constraint(m, e2, x[14]+x[15] <= 300.0)
@constraint(m, e3, x[16]+x[17] <= 50.0)
@constraint(m, e4, x[18]+x[19] <= 300.0)
@constraint(m, e5, x[5]+x[6] <= 300.0)
@constraint(m, e6, x[14]+x[15]+x[16]+x[17]+x[18]+x[19] <= 300.0)
@constraint(m, e7, x[5]+x[14]+x[16]+x[18] <= 100.0)
@constraint(m, e8, x[6]+x[15]+x[17]+x[19] <= 200.0)
@constraint(m, e9, -0.5*x[5]+0.5*x[14]-1.5*x[16]-1.5*x[18] <= 0.0)
@constraint(m, e10, 0.5*x[6]+1.5*x[15]-0.5*x[17]-0.5*x[19] <= 0.0)
@constraint(m, e11, x[9]+x[10]+x[11] == 1.0)
@constraint(m, e12, x[12]+x[13] == 1.0)
@NLconstraint(m, e13, -x[9]*x[7]+x[14] == 0.0)
@NLconstraint(m, e14, -x[9]*x[8]+x[15] == 0.0)
@NLconstraint(m, e15, -x[10]*x[7]+x[16] == 0.0)
@NLconstraint(m, e16, -x[10]*x[8]+x[17] == 0.0)
@NLconstraint(m, e17, -x[11]*x[7]+x[18] == 0.0)
@NLconstraint(m, e18, -x[11]*x[8]+x[19] == 0.0)
@NLconstraint(m, e19, -x[12]*x[2]+x[14] == 0.0)
@NLconstraint(m, e20, -x[13]*x[2]+x[15] == 0.0)
@NLconstraint(m, e21, -x[12]*x[3]+x[16] == 0.0)
@NLconstraint(m, e22, -x[13]*x[3]+x[17] == 0.0)
@NLconstraint(m, e23, -x[12]*x[4]+x[18] == 0.0)
@NLconstraint(m, e24, -x[13]*x[4]+x[19] == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.