using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
@variable(m, x[x_Idx])


# ----- Constraints ----- #
@NLconstraint(m, e1, x[1]*x[10]*x[10]+2*x[2]*x[10]*x[11]+x[4]*x[11]*x[11]-2*x[7]*x[10]-2*x[8]*x[11]+2*x[3]*x[10]*x[12]+2*x[5]*x[11]*x[12]+x[6]*x[12]*x[12]-2*x[9]*x[12] == 1.0)
@NLconstraint(m, e2, x[1]*x[13]*x[13]+2*x[2]*x[13]*x[14]+x[4]*x[14]*x[14]-2*x[7]*x[13]-2*x[8]*x[14]+2*x[3]*x[13]*x[15]+2*x[5]*x[14]*x[15]+x[6]*x[15]*x[15]-2*x[9]*x[15] == 1.0)
@NLconstraint(m, e3, x[1]*x[16]*x[16]+2*x[2]*x[16]*x[17]+x[4]*x[17]*x[17]-2*x[7]*x[16]-2*x[8]*x[17]+2*x[3]*x[16]*x[18]+2*x[5]*x[17]*x[18]+x[6]*x[18]*x[18]-2*x[9]*x[18] == 1.0)
@NLconstraint(m, e4, x[1]*x[19]*x[19]+2*x[2]*x[19]*x[20]+x[4]*x[20]*x[20]-2*x[7]*x[19]-2*x[8]*x[20]+2*x[3]*x[19]*x[21]+2*x[5]*x[20]*x[21]+x[6]*x[21]*x[21]-2*x[9]*x[21] == 1.0)
@NLconstraint(m, e5, x[1]*x[22]*x[22]+2*x[2]*x[22]*x[23]+x[4]*x[23]*x[23]-2*x[7]*x[22]-2*x[8]*x[23]+2*x[3]*x[22]*x[24]+2*x[5]*x[23]*x[24]+x[6]*x[24]*x[24]-2*x[9]*x[24] == 1.0)
@NLconstraint(m, e6, x[1]*x[25]*x[25]+2*x[2]*x[25]*x[26]+x[4]*x[26]*x[26]-2*x[7]*x[25]-2*x[8]*x[26]+2*x[3]*x[25]*x[27]+2*x[5]*x[26]*x[27]+x[6]*x[27]*x[27]-2*x[9]*x[27] == 1.0)
@NLconstraint(m, e7, -((-9.5+x[10])*(-9.5+x[10])+(-9.5+x[11])*(-9.5+x[11])+(-0.5+x[12])*(-0.5+x[12])+(-6.5+x[13])*(-6.5+x[13])+(5.5+x[14])*(5.5+x[14])+(-0.5+x[15])*(-0.5+x[15])+(8.5+x[16])*(8.5+x[16])+(8.5+x[17])*(8.5+x[17])+(-0.5+x[18])*(-0.5+x[18])+(5.5+x[19])*(5.5+x[19])+(-6.5+x[20])*(-6.5+x[20])+(-0.5+x[21])*(-0.5+x[21])+(-0.5+x[22])*(-0.5+x[22])+(-0.5+x[23])*(-0.5+x[23])+(-7.5+x[24])*(-7.5+x[24])+(-0.5+x[25])*(-0.5+x[25])+(-0.5+x[26])*(-0.5+x[26])+(6.5+x[27])*(6.5+x[27]))+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.