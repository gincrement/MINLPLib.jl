using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7]
@variable(m, x[x_Idx])


# ----- Constraints ----- #
@NLconstraint(m, e1, -(0.87584*(x[1]*(2.95137*x[1]+4.87407*x[2]-2.0506*x[3])+x[2]*(2.95137*x[1]+4.87407*x[2]-2.0506*x[3])+x[3]*(2.95137*x[1]+4.87407*x[2]-2.0506*x[3]))-0.564255*x[1]+0.392417*x[2]-0.404979*x[3])+x[4] == 0.14272)
@NLconstraint(m, e2, -(0.927589*x[1]-0.675975*(x[1]*(4.87407*x[1]+9.39321*x[2]-3.93181*x[3])+x[2]*(4.87407*x[1]+9.39321*x[2]-3.93181*x[3])+x[3]*(4.87407*x[1]+9.39321*x[2]-3.93181*x[3]))-0.0735084*x[2]+0.535493*x[3])+x[5] == -0.184918)
@NLconstraint(m, e3, -(0.658799*x[1]-0.239524*(x[1]*(-2.0506*x[1]-3.93189*x[2]+2.64745*x[3])+x[2]*(-2.0506*x[1]-3.93189*x[2]+2.64745*x[3])+x[3]*(-2.0506*x[1]-3.93189*x[2]+2.64745*x[3]))-0.636666*x[2]-0.681091*x[3])+x[6] == -0.521869)
@constraint(m, e4, 0.869487*x[1]-0.586387*x[2]-0.289826*x[3]+x[7] == -0.685306)
@NLconstraint(m, e5, -( (x[4])^2+ (x[5])^2+ (x[6])^2+ (x[7])^2)+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.