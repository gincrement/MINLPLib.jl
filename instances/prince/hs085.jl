using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38]
@variable(m, x[x_Idx])
set_lower_bound(x[3], 0.0)
set_lower_bound(x[1], 704.4148)
set_upper_bound(x[1], 906.3855)
set_lower_bound(x[2], 68.6)
set_upper_bound(x[2], 288.88)
set_upper_bound(x[3], 134.75)
set_lower_bound(x[4], 193.0)
set_upper_bound(x[4], 287.0966)
set_lower_bound(x[5], 25.0)
set_upper_bound(x[5], 84.1988)
set_lower_bound(x[6], 213.1)
set_upper_bound(x[6], 405.23)
set_lower_bound(x[8], 17.505)
set_upper_bound(x[8], 1053.6667)
set_lower_bound(x[11], 11.275)
set_upper_bound(x[11], 35.03)
set_lower_bound(x[12], 214.228)
set_upper_bound(x[12], 665.585)
set_lower_bound(x[17], 7.458)
set_upper_bound(x[17], 584.463)
set_lower_bound(x[18], 0.961)
set_upper_bound(x[18], 265.916)
set_lower_bound(x[20], 1.612)
set_upper_bound(x[20], 7.046)
set_lower_bound(x[21], 0.146)
set_upper_bound(x[21], 0.222)
set_lower_bound(x[23], 107.99)
set_upper_bound(x[23], 273.366)
set_lower_bound(x[24], 922.693)
set_upper_bound(x[24], 1286.105)
set_lower_bound(x[25], 926.832)
set_upper_bound(x[25], 1444.046)
set_lower_bound(x[28], 18.766)
set_upper_bound(x[28], 537.141)
set_lower_bound(x[29], 1072.163)
set_upper_bound(x[29], 3247.039)
set_lower_bound(x[30], 8961.448)
set_upper_bound(x[30], 26844.086)
set_lower_bound(x[32], 0.063)
set_upper_bound(x[32], 0.386)
set_lower_bound(x[33], 71084.33)
set_upper_bound(x[33], 140000.0)
set_lower_bound(x[35], 2.802713e6)
set_upper_bound(x[35], 1.2146108e7)


# ----- Constraints ----- #
@constraint(m, e1, -x[2]-x[3]+x[6] == 41.6)
@constraint(m, e2, -0.024*x[4]+x[7] == -4.62)
@NLconstraint(m, e3, (-12+x[8])*x[7] == 12.5)
@NLconstraint(m, e4, -(0.0003535* (x[1])^2+0.5311*x[1]+0.08705*x[8]*x[1])+x[9] == 0.0)
@NLconstraint(m, e5, -(0.002377*x[8]*x[1]+0.052*x[1])+x[10] == 78.0)
@NLconstraint(m, e6, x[11]*x[10]-x[9] == 0.0)
@constraint(m, e7, -19*x[11]+x[12] == 0.0)
@NLconstraint(m, e8, -(0.1956* (x[1]-x[11])^2/x[2]+0.04782*x[1]-0.04782*x[11]+1.594*x[11])-0.6376*x[12]+x[13] == 0.0)
@constraint(m, e9, -100*x[2]+x[14] == 0.0)
@constraint(m, e10, -x[1]+x[11]+x[12]+x[15] == 0.0)
@NLconstraint(m, e11, (-0.95+x[16])*x[14]+x[13] == 0.0)
@NLconstraint(m, e12, -x[15]*x[16]+x[17] == 0.0)
@constraint(m, e13, -x[1]+x[11]+x[12]+x[17]+x[18] == 0.0)
@constraint(m, e14, -0.995*x[12]-0.995*x[17]+x[19] == 0.0)
@NLconstraint(m, e15, x[20]*x[6]-x[19] == 0.0)
@constraint(m, e16, -0.000263296471827277*x[19]+x[21] == 0.0)
@NLconstraint(m, e17, (0.3153-x[20]+x[22])*x[21]+0.0663*x[20] == 0.0)
@NLconstraint(m, e18, (x[23]-0.321*x[6])*x[22] == 96.82)
@constraint(m, e19, -2.29*x[11]-1.258*x[12]-1.29*x[17]-1.71*x[18]+x[24] == 0.0)
@constraint(m, e20, -1.71*x[1]-0.58*x[11]+0.452*x[12]+x[25] == 0.0)
@NLconstraint(m, e21, -1.74125*x[8]*x[1]+x[26] == 0.0)
@constraint(m, e22, -0.995*x[24]+x[27] == 1998.0)
@NLconstraint(m, e23, (x[28]-0.0163498604280207*x[1])*x[27]-x[26] == 0.0)
@constraint(m, e24, 1.75*x[8]-x[27]+x[29] == 0.0)
@NLconstraint(m, e25, -146312/(x[5]+x[23])-64.4*x[2]-58.4*x[3]+x[30] == 3623.0)
@constraint(m, e26, -60.8*x[2]-48*x[4]-0.995*x[24]+0.1121*x[30]+x[31] == -5095.0)
@NLconstraint(m, e27, x[32]*x[31]-x[29] == 0.0)
@NLconstraint(m, e28, -(40*x[29]-61*x[32]*x[29]-331000*x[32])+x[33] == 148000.0)
@constraint(m, e29, 28740000*x[8]-2324*x[24]+x[34] == 0.0)
@NLconstraint(m, e30, (-14130000+1328*x[24]+531*x[25]+x[35])*x[27]+x[34] == 0.0)
@NLconstraint(m, e31, (1.92307692307692*x[29]+x[36])*x[32]-x[29] == 0.0)
@constraint(m, e32, 0.72*x[32]+x[37] == 1.104)
@constraint(m, e33, -x[5]-x[23]+x[38] == 0.0)
@constraint(m, e34, 1.5*x[2]-x[3] >= 0.0)
@constraint(m, e35, x[12]-0.388888888888889*x[17] >= 0.0)
@constraint(m, e36, -3496*x[8]+21*x[27] >= 0.0)
@NLconstraint(m, e37, -(110.6+x[6])*x[38] >= -62212.0)
@NLconstraint(m, e38, objvar*x[37]*x[27]-(0.000117*x[30]*x[37]*x[27]-5.843e-7*x[35]*x[37]*x[27]+2.358e-5*x[29]*x[37]*x[27]+1.502e-6*x[33]*x[37]*x[27]+0.0321*x[28]*x[37]*x[27]+0.004324*x[17]*x[37]*x[27]+0.0001*x[36]*x[27]+37.48*x[8]*x[37]+0.1365*x[37]*x[27]) == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.