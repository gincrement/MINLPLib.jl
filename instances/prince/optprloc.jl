using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
@variable(m, x[x_Idx])
set_lower_bound(x[4], 0.0)
set_lower_bound(x[16], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[10], 0.0)
set_lower_bound(x[1], 2.0)
set_upper_bound(x[1], 4.5)
set_upper_bound(x[2], 8.0)
set_lower_bound(x[3], 3.0)
set_upper_bound(x[3], 9.0)
set_upper_bound(x[4], 5.0)
set_lower_bound(x[5], 4.0)
set_upper_bound(x[5], 10.0)
set_upper_bound(x[6], 1.0)
set_upper_bound(x[7], 1.0)
set_upper_bound(x[8], 1.0)
set_upper_bound(x[9], 1.0)
set_upper_bound(x[10], 1.0)
set_upper_bound(x[11], 1.0)
set_upper_bound(x[12], 1.0)
set_upper_bound(x[13], 1.0)
set_upper_bound(x[14], 1.0)
set_upper_bound(x[15], 1.0)
set_upper_bound(x[16], 1.0)
set_upper_bound(x[17], 1.0)
set_upper_bound(x[18], 1.0)
set_upper_bound(x[19], 1.0)
set_upper_bound(x[20], 1.0)
set_upper_bound(x[21], 1.0)
set_upper_bound(x[22], 1.0)
set_upper_bound(x[23], 1.0)
set_upper_bound(x[24], 1.0)
set_upper_bound(x[25], 1.0)
set_upper_bound(x[26], 1.0)
set_upper_bound(x[27], 1.0)
set_upper_bound(x[28], 1.0)
set_upper_bound(x[29], 1.0)
set_upper_bound(x[30], 1.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, -(9.57* ((-2.26)+x[1])^2+2.74* ((-5.15)+x[2])^2+9.75* ((-4.03)+x[3])^2+3.96* ((-1.74)+x[4])^2+8.67* ((-4.74)+x[5])^2)-1000*x[6] >= -1077.83985)
@NLconstraint(m, e2, -(8.38* ((-5.51)+x[1])^2+3.93* ((-9.01)+x[2])^2+5.18* ((-3.84)+x[3])^2+5.2* ((-1.47)+x[4])^2+7.82* ((-9.92)+x[5])^2)-1000*x[7] >= -1175.971)
@NLconstraint(m, e3, -(9.81* ((-4.06)+x[1])^2+0.04* ((-1.8)+x[2])^2+4.21* ((-0.71)+x[3])^2+7.38* ((-9.09)+x[4])^2+4.11* ((-8.13)+x[5])^2)-1000*x[8] >= -1201.8226)
@NLconstraint(m, e4, -(7.41* ((-6.3)+x[1])^2+6.08* ((-0.11)+x[2])^2+5.46* ((-4.08)+x[3])^2+4.86* ((-7.29)+x[4])^2+1.48* ((-4.24)+x[5])^2)-1000*x[9] >= -1143.9533)
@NLconstraint(m, e5, -(9.96* ((-2.81)+x[1])^2+9.13* ((-1.65)+x[2])^2+2.95* ((-8.08)+x[3])^2+8.25* ((-3.99)+x[4])^2+3.58* ((-3.51)+x[5])^2)-1000*x[10] >= -1154.3895)
@NLconstraint(m, e6, -(9.39* ((-4.29)+x[1])^2+4.27* ((-9.49)+x[2])^2+5.09* ((-2.24)+x[3])^2+1.81* ((-9.78)+x[4])^2+7.58* ((-1.52)+x[5])^2)-1000*x[11] >= -1433.3177)
@NLconstraint(m, e7, -(1.88* ((-9.76)+x[1])^2+7.2* ((-3.64)+x[2])^2+6.65* ((-6.62)+x[3])^2+1.74* ((-3.66)+x[4])^2+2.86* ((-9.08)+x[5])^2)-1000*x[12] >= -1109.0764)
@NLconstraint(m, e8, -(4.01* ((-1.37)+x[1])^2+2.67* ((-6.99)+x[2])^2+4.86* ((-7.19)+x[3])^2+2.55* ((-3.03)+x[4])^2+6.91* ((-3.39)+x[5])^2)-1000*x[13] >= -1041.59592)
@NLconstraint(m, e9, -(4.18* ((-8.89)+x[1])^2+1.92* ((-8.29)+x[2])^2+2.6* ((-6.05)+x[3])^2+7.15* ((-7.48)+x[4])^2+2.86* ((-4.09)+x[5])^2)-1000*x[14] >= -1144.0623)
@NLconstraint(m, e10, -(7.81* ((-7.42)+x[1])^2+2.14* ((-4.6)+x[2])^2+9.63* ((-0.3)+x[3])^2+7.61* ((-0.97)+x[4])^2+9.17* ((-8.77)+x[5])^2)-1000*x[15] >= -1099.83416)
@NLconstraint(m, e11, -(8.96* ((-1.54)+x[1])^2+3.47* ((-7.06)+x[2])^2+5.49* ((-0.01)+x[3])^2+4.73* ((-1.23)+x[4])^2+9.43* ((-3.11)+x[5])^2)-1000*x[16] >= -1149.1791)
@NLconstraint(m, e12, -(9.94* ((-7.74)+x[1])^2+1.63* ((-4.4)+x[2])^2+1.23* ((-7.93)+x[3])^2+4.33* ((-5.95)+x[4])^2+7.08* ((-4.88)+x[5])^2)-1000*x[17] >= -1123.8074)
@NLconstraint(m, e13, -(0.31* ((-9.94)+x[1])^2+5* ((-5.21)+x[2])^2+0.16* ((-8.58)+x[3])^2+2.52* ((-0.13)+x[4])^2+3.08* ((-4.57)+x[5])^2)-1000*x[18] >= -1027.22197)
@NLconstraint(m, e14, -(6.02* ((-9.54)+x[1])^2+0.92* ((-1.57)+x[2])^2+7.47* ((-9.66)+x[3])^2+9.74* ((-5.24)+x[4])^2+1.76* ((-7.9)+x[5])^2)-1000*x[19] >= -1089.92683)
@NLconstraint(m, e15, -(5.06* ((-7.46)+x[1])^2+4.52* ((-8.81)+x[2])^2+1.89* ((-1.67)+x[3])^2+1.22* ((-6.47)+x[4])^2+9.05* ((-1.81)+x[5])^2)-1000*x[20] >= -1293.0766)
@NLconstraint(m, e16, -(5.92* ((-0.56)+x[1])^2+2.56* ((-8.1)+x[2])^2+7.74* ((-0.19)+x[3])^2+6.96* ((-6.11)+x[4])^2+5.18* ((-6.4)+x[5])^2)-1000*x[21] >= -1174.317)
@NLconstraint(m, e17, -(6.45* ((-3.86)+x[1])^2+1.52* ((-6.68)+x[2])^2+0.06* ((-6.42)+x[3])^2+5.34* ((-7.29)+x[4])^2+8.47* ((-4.66)+x[5])^2)-1000*x[22] >= -1125.1028)
@NLconstraint(m, e18, -(1.04* ((-2.98)+x[1])^2+1.36* ((-2.98)+x[2])^2+5.99* ((-3.03)+x[3])^2+8.1* ((-0.02)+x[4])^2+5.22* ((-0.67)+x[5])^2)-1000*x[23] >= -1222.8417)
@NLconstraint(m, e19, -(1.4* ((-3.61)+x[1])^2+1.35* ((-7.62)+x[2])^2+0.59* ((-1.79)+x[3])^2+8.58* ((-7.8)+x[4])^2+1.21* ((-9.81)+x[5])^2)-1000*x[24] >= -1050.48593)
@NLconstraint(m, e20, -(6.68* ((-5.68)+x[1])^2+9.48* ((-4.24)+x[2])^2+1.6* ((-4.17)+x[3])^2+6.74* ((-6.75)+x[4])^2+8.92* ((-1.08)+x[5])^2)-1000*x[25] >= -1361.1973)
@NLconstraint(m, e21, -(1.95* ((-5.48)+x[1])^2+0.46* ((-3.74)+x[2])^2+2.9* ((-3.34)+x[3])^2+1.79* ((-6.22)+x[4])^2+0.99* ((-7.94)+x[5])^2)-1000*x[26] >= -1040.32642)
@NLconstraint(m, e22, -(5.18* ((-8.13)+x[1])^2+5.1* ((-8.72)+x[2])^2+8.81* ((-3.93)+x[3])^2+3.27* ((-8.8)+x[4])^2+9.63* ((-8.56)+x[5])^2)-1000*x[27] >= -1161.8518)
@NLconstraint(m, e23, -(1.47* ((-1.37)+x[1])^2+5.71* ((-0.54)+x[2])^2+6.95* ((-1.55)+x[3])^2+1.42* ((-5.56)+x[4])^2+3.49* ((-5.85)+x[5])^2)-1000*x[28] >= -1066.85827)
@NLconstraint(m, e24, -(5.4* ((-8.79)+x[1])^2+3.12* ((-5.04)+x[2])^2+5.37* ((-4.83)+x[3])^2+6.1* ((-6.94)+x[4])^2+3.71* ((-0.38)+x[5])^2)-1000*x[29] >= -1340.5807)
@NLconstraint(m, e25, -(6.32* ((-2.66)+x[1])^2+0.81* ((-4.19)+x[2])^2+6.12* ((-6.49)+x[3])^2+6.73* ((-8.04)+x[4])^2+7.93* ((-1.66)+x[5])^2)-1000*x[30] >= -1407.52)
@constraint(m, e26, -x[1]+x[2]-x[3]-x[4]-x[5] >= -10.0)
@constraint(m, e27, -0.6*x[1]+0.9*x[2]+0.5*x[3]-0.1*x[4]-x[5] >= 0.64)
@constraint(m, e28, -x[1]+x[2]-x[3]+x[4]-x[5] <= -0.69)
@constraint(m, e29, -0.157*x[1]-0.05*x[2] >= -1.5)
@constraint(m, e30, -0.25*x[2]-1.05*x[4]+0.3*x[5] <= -4.5)
@NLconstraint(m, e31, -(0.6* (x[1])^2+0.1* (x[4])^2)+0.9*x[2]+0.5*x[3]-x[5]+x[6]+0.2*x[7]+x[8]+0.2*x[9]+0.9*x[10]+0.9*x[11]+0.1*x[12]+0.8*x[13]+x[14]+0.4*x[15]+x[16]+0.3*x[17]+0.1*x[18]+0.3*x[19]+0.5*x[20]+0.9*x[21]+0.8*x[22]+0.1*x[23]+0.9*x[24]+x[25]+x[26]+x[27]+0.2*x[28]+0.7*x[29]+0.7*x[30]+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.