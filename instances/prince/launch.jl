using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]
@variable(m, x[x_Idx])
set_lower_bound(x[1], 1.0e-8)
set_upper_bound(x[1], 10000.0)
set_lower_bound(x[2], 1.0e-8)
set_upper_bound(x[2], 10000.0)
set_lower_bound(x[3], 0.25)
set_upper_bound(x[3], 0.3)
set_lower_bound(x[4], 1.0e-8)
set_upper_bound(x[4], 10000.0)
set_lower_bound(x[5], 1.0e-8)
set_upper_bound(x[5], 10000.0)
set_lower_bound(x[6], 1.0e-8)
set_upper_bound(x[6], 10000.0)
set_lower_bound(x[7], 125.0)
set_upper_bound(x[7], 150.0)
set_lower_bound(x[8], 1.0e-8)
set_upper_bound(x[8], 10000.0)
set_lower_bound(x[9], 1.0e-8)
set_upper_bound(x[9], 10000.0)
set_lower_bound(x[10], 0.24)
set_upper_bound(x[10], 0.29)
set_lower_bound(x[11], 1.0e-8)
set_upper_bound(x[11], 10000.0)
set_lower_bound(x[12], 1.0e-8)
set_upper_bound(x[12], 10000.0)
set_lower_bound(x[13], 1.0e-8)
set_upper_bound(x[13], 10000.0)
set_lower_bound(x[14], 75.0)
set_upper_bound(x[14], 100.0)
set_lower_bound(x[15], 1.0e-8)
set_upper_bound(x[15], 10000.0)
set_lower_bound(x[16], 1.0e-8)
set_upper_bound(x[16], 10000.0)
set_lower_bound(x[17], 0.16)
set_upper_bound(x[17], 0.21)
set_lower_bound(x[18], 1.0e-8)
set_upper_bound(x[18], 10000.0)
set_lower_bound(x[19], 1.0e-8)
set_upper_bound(x[19], 10000.0)
set_lower_bound(x[20], 1.0e-8)
set_upper_bound(x[20], 10000.0)
set_lower_bound(x[21], 50.0)
set_upper_bound(x[21], 70.0)
set_lower_bound(x[22], 2.5)
set_upper_bound(x[22], 4.0)
set_lower_bound(x[23], 1.0e-8)
set_upper_bound(x[23], 10000.0)
set_lower_bound(x[24], 1.0e-8)
set_upper_bound(x[24], 10000.0)
set_lower_bound(x[25], 1.0e-8)
set_upper_bound(x[25], 10000.0)


# ----- Constraints ----- #
@constraint(m, e1, 2*x[1]-x[2] == 0.0)
@constraint(m, e2, -x[8]+0.6*x[9] == 0.0)
@constraint(m, e3, -x[15]+0.7*x[16] == 0.0)
@constraint(m, e4, -x[4]+5*x[6] == 0.0)
@constraint(m, e5, -x[11]+5*x[13] == 0.0)
@constraint(m, e6, x[18]-x[20] == 0.0)
@constraint(m, e7, 12*x[2]-x[5] <= 0.0)
@constraint(m, e8, 17*x[2]-x[5] >= 0.0)
@constraint(m, e9, 10*x[9]-x[12] <= 0.0)
@constraint(m, e10, 13*x[9]-x[12] >= 0.0)
@constraint(m, e11, 7*x[16]-x[19] <= 0.0)
@constraint(m, e12, 10*x[16]-x[19] >= 0.0)
@constraint(m, e13, 1.2*x[2]-x[4]+1.2*x[5]+1.2*x[9]+1.2*x[12]+1.2*x[16]+1.2*x[19]+1.2*x[22] <= -24.0)
@constraint(m, e14, 1.4*x[2]-x[4]+1.4*x[5]+1.4*x[9]+1.4*x[12]+1.4*x[16]+1.4*x[19]+1.4*x[22] >= -28.0)
@constraint(m, e15, 0.6*x[9]-x[11]+0.6*x[12]+0.6*x[16]+0.6*x[19]+0.6*x[22] <= -12.0)
@constraint(m, e16, 0.75*x[9]-x[11]+0.75*x[12]+0.75*x[16]+0.75*x[19]+0.75*x[22] >= -15.0)
@constraint(m, e17, 0.7*x[16]-x[18]+0.7*x[19]+0.7*x[22] <= -14.0)
@constraint(m, e18, 0.9*x[16]-x[18]+0.9*x[19]+0.9*x[22] >= -18.0)
@NLconstraint(m, e19, x[3]*x[22]+20*x[3]-x[22]-x[2]-x[9]-x[12]-x[16]-x[19]-x[26] <= 20.0)
@NLconstraint(m, e20, x[10]*x[22]+20*x[10]-x[22]-x[9]-x[16]-x[19]-x[26] <= 20.0)
@NLconstraint(m, e21, x[17]*x[22]+20*x[17]-x[22]-x[16]-x[26] <= 20.0)
@NLconstraint(m, e22, -x[4]*x[23]+240*x[5] <= 0.0)
@NLconstraint(m, e23, -x[4]*x[23]+290*x[5] >= 0.0)
@NLconstraint(m, e24, -x[11]*x[24]+240*x[12] <= 0.0)
@NLconstraint(m, e25, -x[11]*x[24]+290*x[12] >= 0.0)
@NLconstraint(m, e26, -x[18]*x[25]+340*x[19] <= 0.0)
@NLconstraint(m, e27, -x[18]*x[25]+375*x[19] >= 0.0)
@NLconstraint(m, e28, -(-32*x[4]*x[23]*log(x[3])/x[5]-32*x[11]*x[24]*log(x[10])/x[12]-32*x[18]*x[25]*log(x[17])/x[19]) <= -35000.0)
@NLconstraint(m, e29, (-32*x[4]*x[23]*log(x[3])/x[5])-32*x[11]*x[24]*log(x[10])/x[12]-32*x[18]*x[25]*log(x[17])/x[19] <= 50000.0)
@NLconstraint(m, e30, -(x[26]*x[26]+1e-8*(5272.77*exp(1.2781*log(x[1]))*exp(-0.1959*log(x[2]))*exp(2.4242*log(x[3]))*exp(0.38745*log(x[4]))*exp(0.9904*log(x[5]))+160.909*exp(-0.146*log(0.001*x[6]))+282.874*exp(0.648*log(0.001*x[6]))+0.64570846*exp(0.3322*log(x[1]))*exp(-1.5935*log(x[3]))*exp(0.2363*log(x[5]))*exp(0.1079*log(x[7]))+31.136196*exp(0.736*log(0.001*x[6]))+12.092112*exp(-0.229*log(0.001*x[6]))+31.136196*exp(0.736*log(0.001*x[13]))+12.092112*exp(-0.229*log(0.001*x[13]))+0.0002587*x[6])+1e-8*(5272.77*exp(1.2781*log(x[8]))*exp(-0.1959*log(x[9]))*exp(2.4242*log(x[10]))*exp(0.38745*log(x[11]))*exp(0.9904*log(x[12]))+160.909*exp(-0.146*log(0.001*x[13]))+282.874*exp(0.648*log(0.001*x[13]))+0.64570846*exp(0.3322*log(x[8]))*exp(-1.5935*log(x[10]))*exp(0.2363*log(x[12]))*exp(0.1079*log(x[14]))+0.0002587*x[13])+1e-8*(5272.77*exp(1.2781*log(x[15]))*exp(-0.1959*log(x[16]))*exp(2.4242*log(x[17]))*exp(0.38745*log(x[18]))*exp(0.9904*log(x[19]))+181.806*exp(0.539*log(0.001*x[20]))+232.57*exp(0.772*log(0.001*x[20]))+0.49783215*exp(0.3322*log(x[15]))*exp(-1.5935*log(x[17]))*exp(0.2363*log(x[19]))*exp(0.1079*log(x[21]))-0.22424514*exp(-1.33*log(0.01*x[20]))+20.708238*exp(0.498*log(0.01*x[20]))+0.001958*x[20])+2.55000001785e-8*exp(0.46*log(0.003*x[5]+0.003*x[12]+0.003*x[19])))-4.7040096E-7*x[22]+objvar == -5.64017e-6)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.