using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9]
@variable(m, x[x_Idx])


# ----- Constraints ----- #
@NLconstraint(m, e1,  ((-1.99609375)+x[1]+x[2]+x[3]+x[4]+x[5]+x[6]+x[7]+x[8]+x[9])^2 == 0.0)
@NLconstraint(m, e2,  ((-1.33332824707031)+ (x[1])^2+ (x[2])^2+ (x[3])^2+ (x[4])^2+ (x[5])^2+ (x[6])^2+ (x[7])^2+ (x[8])^2+ (x[9])^2)^2 == 0.0)
@NLconstraint(m, e3,  ((-1.14285713434219)+ (x[1])^3+ (x[2])^3+ (x[3])^3+ (x[4])^3+ (x[5])^3+ (x[6])^3+ (x[7])^3+ (x[8])^3+ (x[9])^3)^2 == 0.0)
@NLconstraint(m, e4,  ((-1.06666666665114)+ (x[1])^4+ (x[2])^4+ (x[3])^4+ (x[4])^4+ (x[5])^4+ (x[6])^4+ (x[7])^4+ (x[8])^4+ (x[9])^4)^2 == 0.0)
@NLconstraint(m, e5,  ((-1.0322580645161)+ (x[1])^5+ (x[2])^5+ (x[3])^5+ (x[4])^5+ (x[5])^5+ (x[6])^5+ (x[7])^5+ (x[8])^5+ (x[9])^5)^2 == 0.0)
@NLconstraint(m, e6,  ((-1.01587301587302)+ (x[1])^6+ (x[2])^6+ (x[3])^6+ (x[4])^6+ (x[5])^6+ (x[6])^6+ (x[7])^6+ (x[8])^6+ (x[9])^6)^2 == 0.0)
@NLconstraint(m, e7,  ((-1.00787401574803)+ (x[1])^7+ (x[2])^7+ (x[3])^7+ (x[4])^7+ (x[5])^7+ (x[6])^7+ (x[7])^7+ (x[8])^7+ (x[9])^7)^2 == 0.0)
@NLconstraint(m, e8,  ((-1.00392156862745)+ (x[1])^8+ (x[2])^8+ (x[3])^8+ (x[4])^8+ (x[5])^8+ (x[6])^8+ (x[7])^8+ (x[8])^8+ (x[9])^8)^2 == 0.0)
@NLconstraint(m, e9,  ((-1.00195694716243)+ (x[1])^9+ (x[2])^9+ (x[3])^9+ (x[4])^9+ (x[5])^9+ (x[6])^9+ (x[7])^9+ (x[8])^9+ (x[9])^9)^2 == 0.0)
@constraint(m, e10, -x[1]+x[2] >= 0.0)
@constraint(m, e11, -x[2]+x[3] >= 0.0)
@constraint(m, e12, -x[3]+x[4] >= 0.0)
@constraint(m, e13, -x[4]+x[5] >= 0.0)
@constraint(m, e14, -x[5]+x[6] >= 0.0)
@constraint(m, e15, -x[6]+x[7] >= 0.0)
@constraint(m, e16, -x[7]+x[8] >= 0.0)
@constraint(m, e17, -x[8]+x[9] >= 0.0)
@constraint(m, e18, objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.