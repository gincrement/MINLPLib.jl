using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61]
@variable(m, x[x_Idx])
set_lower_bound(x[36], 0.0)
set_lower_bound(x[54], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[45], 0.0)
set_lower_bound(x[42], 0.0)
set_lower_bound(x[51], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[48], 0.0)
set_lower_bound(x[39], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[1], 0.1)
set_lower_bound(x[2], 0.1)
set_lower_bound(x[3], 0.1)
set_lower_bound(x[5], 0.1)
set_lower_bound(x[6], 0.0)
set_upper_bound(x[6], 0.0)
set_lower_bound(x[7], 0.1)
set_lower_bound(x[9], 0.1)
set_lower_bound(x[11], 0.1)
set_lower_bound(x[12], 0.0)
set_upper_bound(x[12], 0.0)
set_lower_bound(x[13], 0.1)
set_lower_bound(x[15], 0.0)
set_upper_bound(x[15], 0.0)
set_lower_bound(x[18], 0.0)
set_upper_bound(x[18], 0.0)
set_lower_bound(x[21], 0.0)
set_upper_bound(x[21], 0.0)
set_lower_bound(x[22], 0.1)
set_lower_bound(x[24], 0.1)
set_lower_bound(x[27], 0.0)
set_upper_bound(x[27], 0.0)
set_lower_bound(x[30], 0.0)
set_upper_bound(x[30], 0.0)
set_lower_bound(x[33], 0.1)
set_lower_bound(x[35], 0.1)
set_lower_bound(x[36], 0.0)
set_upper_bound(x[36], 0.0)
set_lower_bound(x[39], 0.0)
set_upper_bound(x[39], 0.0)
set_lower_bound(x[42], 0.0)
set_upper_bound(x[42], 0.0)
set_lower_bound(x[44], 0.1)
set_lower_bound(x[45], 0.0)
set_upper_bound(x[45], 0.0)
set_lower_bound(x[46], 4.0)
set_upper_bound(x[46], 5.0)
set_lower_bound(x[48], 0.0)
set_upper_bound(x[48], 0.0)
set_lower_bound(x[51], 0.0)
set_upper_bound(x[51], 0.0)
set_lower_bound(x[54], 0.0)
set_upper_bound(x[54], 0.0)
set_lower_bound(x[55], 4.0)
set_upper_bound(x[55], 5.0)
set_lower_bound(x[59], 4.0)
set_upper_bound(x[59], 5.0)
set_lower_bound(x[60], 4.0)
set_upper_bound(x[60], 5.0)


# ----- Constraints ----- #
@constraint(m, e1, x[1]+x[2] == 10.0)
@constraint(m, e2, -x[1]+x[3]+x[4] == 0.0)
@constraint(m, e3, -x[3]+x[5]+x[6] == 0.0)
@constraint(m, e4, -x[5]+x[7]+x[8] == 0.0)
@constraint(m, e5, -x[7]+x[9]+x[10] == 0.0)
@constraint(m, e6, -x[9]+x[11] == 0.0)
@constraint(m, e7, -x[2]+x[12]+x[13] == 0.0)
@constraint(m, e8, -x[4]-x[12]+x[14]+x[15] == 0.0)
@constraint(m, e9, -x[6]-x[14]+x[16]+x[17] == 0.0)
@constraint(m, e10, -x[8]-x[16]+x[18]+x[19] == 0.0)
@constraint(m, e11, -x[10]-x[18]+x[20]+x[21] == 0.0)
@constraint(m, e12, -x[11]-x[20]+x[22] == 0.0)
@constraint(m, e13, -x[13]+x[23]+x[24] == 0.0)
@constraint(m, e14, -x[15]-x[23]+x[25]+x[26] == 0.0)
@constraint(m, e15, -x[17]-x[25]+x[27]+x[28] == 0.0)
@constraint(m, e16, -x[19]-x[27]+x[29]+x[30] == 0.0)
@constraint(m, e17, -x[21]-x[29]+x[31]+x[32] == 0.0)
@constraint(m, e18, -x[22]-x[31]+x[33] == 0.0)
@constraint(m, e19, -x[24]+x[34]+x[35] == 0.0)
@constraint(m, e20, -x[26]-x[34]+x[36]+x[37] == 0.0)
@constraint(m, e21, -x[28]-x[36]+x[38]+x[39] == 0.0)
@constraint(m, e22, -x[30]-x[38]+x[40]+x[41] == 0.0)
@constraint(m, e23, -x[32]-x[40]+x[42]+x[43] == 0.0)
@constraint(m, e24, -x[33]-x[42]+x[44] == 0.0)
@constraint(m, e25, -x[35]+x[45]+x[46] == 0.0)
@constraint(m, e26, -x[37]-x[45]+x[47]+x[48] == 0.0)
@constraint(m, e27, -x[39]-x[47]+x[49]+x[50] == 0.0)
@constraint(m, e28, -x[41]-x[49]+x[51]+x[52] == 0.0)
@constraint(m, e29, -x[43]-x[51]+x[53]+x[54] == 0.0)
@constraint(m, e30, -x[44]-x[53]+x[55] == 0.0)
@constraint(m, e31, -x[46]+x[56] == 0.0)
@constraint(m, e32, -x[48]-x[56]+x[57] == 0.0)
@constraint(m, e33, -x[50]-x[57]+x[58] == 0.0)
@constraint(m, e34, -x[52]-x[58]+x[59] == 0.0)
@constraint(m, e35, -x[54]-x[59]+x[60] == 0.0)
@constraint(m, e36, -x[55]-x[60] == -10.0)
@NLconstraint(m, e37, -(0.01*x[1]*x[1]+0.01*x[5]*x[5]+0.01*x[9]*x[9]+0.01*x[11]*x[11]+0.01*x[2]*x[2]+0.01*x[33]*x[33]+0.01*x[24]*x[24]+0.01*x[55]*x[55]+0.01*x[46]*x[46]+0.01*x[56]*x[56]+0.01*x[58]*x[58]+0.01*x[60]*x[60]+0.01*x[4]*x[4]+0.01*x[6]*x[6]+0.01*x[12]*x[12]+0.01*x[23]*x[23]+0.01*x[15]*x[15]+0.01*x[17]*x[17]+0.01*x[14]*x[14]+0.01*x[25]*x[25]+0.01*x[26]*x[26]+0.01*x[28]*x[28]+0.01*x[16]*x[16]+0.01*x[27]*x[27]+0.01*x[37]*x[37]+0.01*x[39]*x[39]+0.01*x[18]*x[18]+0.01*x[29]*x[29]+0.01*x[48]*x[48]+0.01*x[50]*x[50]+0.01*x[20]*x[20]+0.01*x[31]*x[31]+0.01*x[3]*x[3]+0.01*x[57]*x[57]+0.01*x[13]*x[13]+0.01*x[22]*x[22]+1.00000000001191*x[8]*x[8]+1.00000000001191*x[10]*x[10]+1.00000000001191*x[34]*x[34]+1.00000000001191*x[45]*x[45]+1.00000000001191*x[19]*x[19]+1.00000000001191*x[21]*x[21]+1.00000000001191*x[36]*x[36]+1.00000000001191*x[47]*x[47]+1.00000000001191*x[30]*x[30]+1.00000000001191*x[32]*x[32]+1.00000000001191*x[38]*x[38]+1.00000000001191*x[49]*x[49]+1.00000000001191*x[41]*x[41]+1.00000000001191*x[43]*x[43]+1.00000000001191*x[40]*x[40]+1.00000000001191*x[51]*x[51]+1.00000000001191*x[52]*x[52]+1.00000000001191*x[54]*x[54]+1.00000000001191*x[42]*x[42]+1.00000000001191*x[53]*x[53]+1.00000000001191*x[7]*x[7]+1.00000000001191*x[59]*x[59]+1.00000000001191*x[35]*x[35]+1.00000000001191*x[44]*x[44]+0.01*sqrt(1+2*x[1]*(x[1]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[2]*(x[2]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[3]*(x[3]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[4]*(x[4]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[5]*(x[5]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[6]*(x[6]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[7]*(x[7]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[8]*(x[8]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[9]*(x[9]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[10]*(x[10]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[11]*(x[11]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[12]*(x[12]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[13]*(x[13]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[14]*(x[14]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[15]*(x[15]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[16]*(x[16]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[17]*(x[17]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[18]*(x[18]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[19]*(x[19]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[20]*(x[20]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[21]*(x[21]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[22]*(x[22]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[23]*(x[23]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[24]*(x[24]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[25]*(x[25]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[26]*(x[26]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[27]*(x[27]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[28]*(x[28]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[29]*(x[29]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[30]*(x[30]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[31]*(x[31]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[32]*(x[32]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[33]*(x[33]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[34]*(x[34]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[35]*(x[35]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[36]*(x[36]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[37]*(x[37]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[38]*(x[38]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[39]*(x[39]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[40]*(x[40]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[41]*(x[41]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[42]*(x[42]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[43]*(x[43]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[44]*(x[44]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[45]*(x[45]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[46]*(x[46]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[47]*(x[47]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[48]*(x[48]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[49]*(x[49]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[50]*(x[50]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[51]*(x[51]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[52]*(x[52]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[53]*(x[53]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[54]*(x[54]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[55]*(x[55]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[56]*(x[56]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[57]*(x[57]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[58]*(x[58]-x[61])+x[61]*x[61])+0.01*sqrt(1+2*x[59]*(x[59]-x[61])+x[61]*x[61])+8.333333e-6* (10-x[59]+x[60])^4)+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.