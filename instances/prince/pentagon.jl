using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6]
@variable(m, x[x_Idx])


# ----- Constraints ----- #
@constraint(m, e1, 0.309016994374947*x[1]+0.951056516295154*x[4] <= 1.0)
@constraint(m, e2, -0.809016994374947*x[1]+0.587785252292473*x[4] <= 1.0)
@constraint(m, e3, -0.809016994374948*x[1]-0.587785252292473*x[4] <= 1.0)
@constraint(m, e4, 0.309016994374947*x[1]-0.951056516295154*x[4] <= 1.0)
@constraint(m, e5, x[1]-2.44921270764475E-16*x[4] <= 1.0)
@constraint(m, e6, 0.309016994374947*x[2]+0.951056516295154*x[5] <= 1.0)
@constraint(m, e7, -0.809016994374947*x[2]+0.587785252292473*x[5] <= 1.0)
@constraint(m, e8, -0.809016994374948*x[2]-0.587785252292473*x[5] <= 1.0)
@constraint(m, e9, 0.309016994374947*x[2]-0.951056516295154*x[5] <= 1.0)
@constraint(m, e10, x[2]-2.44921270764475E-16*x[5] <= 1.0)
@constraint(m, e11, 0.309016994374947*x[3]+0.951056516295154*x[6] <= 1.0)
@constraint(m, e12, -0.809016994374947*x[3]+0.587785252292473*x[6] <= 1.0)
@constraint(m, e13, -0.809016994374948*x[3]-0.587785252292473*x[6] <= 1.0)
@constraint(m, e14, 0.309016994374947*x[3]-0.951056516295154*x[6] <= 1.0)
@constraint(m, e15, x[3]-2.44921270764475E-16*x[6] <= 1.0)
@NLconstraint(m, e16, -(1/ ( (x[1]-x[2])^2+ (x[4]-x[5])^2)^8+1/ ( (x[1]-x[3])^2+ (x[4]-x[6])^2)^8+1/ ( (x[3]-x[2])^2+ (x[6]-x[5])^2)^8)+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.