using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
@variable(m, x[x_Idx])
set_lower_bound(x[1], -1.0)
set_upper_bound(x[1], 1.0)
set_lower_bound(x[2], -1.0)
set_upper_bound(x[2], 1.0)
set_lower_bound(x[3], -1.0)
set_upper_bound(x[3], 1.0)
set_lower_bound(x[4], -1.0)
set_upper_bound(x[4], 1.0)
set_lower_bound(x[5], -1.0)
set_upper_bound(x[5], 1.0)
set_lower_bound(x[6], -1.0)
set_upper_bound(x[6], 1.0)
set_lower_bound(x[7], -1.0)
set_upper_bound(x[7], 1.0)
set_lower_bound(x[8], -1.0)
set_upper_bound(x[8], 1.0)
set_lower_bound(x[9], -1.0)
set_upper_bound(x[9], 1.0)
set_lower_bound(x[10], -1.0)
set_upper_bound(x[10], 1.0)
set_lower_bound(x[11], -1.0)
set_upper_bound(x[11], 1.0)
set_lower_bound(x[12], -1.0)
set_upper_bound(x[12], 1.0)
set_lower_bound(x[13], -1.0)
set_upper_bound(x[13], 1.0)
set_lower_bound(x[14], -1.0)
set_upper_bound(x[14], 1.0)
set_lower_bound(x[15], -1.0)
set_upper_bound(x[15], 1.0)
set_lower_bound(x[16], -1.0)
set_upper_bound(x[16], 1.0)
set_lower_bound(x[17], -1.0)
set_upper_bound(x[17], 1.0)
set_lower_bound(x[18], -1.0)
set_upper_bound(x[18], 1.0)
set_lower_bound(x[19], -1.0)
set_upper_bound(x[19], 1.0)
set_lower_bound(x[20], -1.0)
set_upper_bound(x[20], 1.0)
set_lower_bound(x[21], -1.0)
set_upper_bound(x[21], 1.0)
set_lower_bound(x[22], -1.0)
set_upper_bound(x[22], 1.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, x[2]*x[2]+x[3]*x[3]+x[4]*x[4]+x[5]*x[5]+x[6]*x[6]+x[7]*x[7]+x[8]*x[8]+x[9]*x[9]+x[10]*x[10]+x[11]*x[11]+x[12]*x[12]+x[13]*x[13]+x[14]*x[14]+x[15]*x[15]+x[16]*x[16]+x[17]*x[17]+x[18]*x[18]+x[19]*x[19]+x[20]*x[20]+x[21]*x[21]+x[22]*x[22] == 1.0)
@NLconstraint(m, e2, x[2]*x[1]-10*x[2]-x[3] == 0.0)
@NLconstraint(m, e3, x[3]*x[1]-9*x[3]-x[2]-x[4] == 0.0)
@NLconstraint(m, e4, x[4]*x[1]-8*x[4]-x[3]-x[5] == 0.0)
@NLconstraint(m, e5, x[5]*x[1]-7*x[5]-x[4]-x[6] == 0.0)
@NLconstraint(m, e6, x[6]*x[1]-6*x[6]-x[5]-x[7] == 0.0)
@NLconstraint(m, e7, x[7]*x[1]-5*x[7]-x[6]-x[8] == 0.0)
@NLconstraint(m, e8, x[8]*x[1]-4*x[8]-x[7]-x[9] == 0.0)
@NLconstraint(m, e9, x[9]*x[1]-3*x[9]-x[8]-x[10] == 0.0)
@NLconstraint(m, e10, x[10]*x[1]-2*x[10]-x[9]-x[11] == 0.0)
@NLconstraint(m, e11, x[11]*x[1]-x[11]-x[10]-x[12] == 0.0)
@NLconstraint(m, e12, x[12]*x[1]-x[11]-x[13] == 0.0)
@NLconstraint(m, e13, x[13]*x[1]+x[13]-x[12]-x[14] == 0.0)
@NLconstraint(m, e14, x[14]*x[1]+2*x[14]-x[13]-x[15] == 0.0)
@NLconstraint(m, e15, x[15]*x[1]+3*x[15]-x[14]-x[16] == 0.0)
@NLconstraint(m, e16, x[16]*x[1]+4*x[16]-x[15]-x[17] == 0.0)
@NLconstraint(m, e17, x[17]*x[1]+5*x[17]-x[16]-x[18] == 0.0)
@NLconstraint(m, e18, x[18]*x[1]+6*x[18]-x[17]-x[19] == 0.0)
@NLconstraint(m, e19, x[19]*x[1]+7*x[19]-x[18]-x[20] == 0.0)
@NLconstraint(m, e20, x[20]*x[1]+8*x[20]-x[19]-x[21] == 0.0)
@NLconstraint(m, e21, x[21]*x[1]+9*x[21]-x[20]-x[22] == 0.0)
@NLconstraint(m, e22, x[22]*x[1]+10*x[22]-x[21] == 0.0)
@constraint(m, e23, -x[1]+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.