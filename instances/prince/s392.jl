using JuMP

m = Model()

# ----- Variables ----- #
@variable(m, objvar)
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]
@variable(m, x[x_Idx])
set_lower_bound(x[4], 0.0)
set_lower_bound(x[16], 0.0)
set_lower_bound(x[6], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[32], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[30], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_lower_bound(x[2], 0.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[31], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[1], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[33], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[10], 0.0)
set_lower_bound(x[1], 0.0)
set_upper_bound(x[1], 0.0)
set_upper_bound(x[2], 100.0)
set_upper_bound(x[3], 180.0)
set_upper_bound(x[4], 220.0)
set_upper_bound(x[5], 150.0)
set_upper_bound(x[6], 100.0)
set_lower_bound(x[7], 0.0)
set_upper_bound(x[7], 0.0)
set_upper_bound(x[8], 280.0)
set_upper_bound(x[9], 400.0)
set_upper_bound(x[10], 450.0)
set_upper_bound(x[11], 450.0)
set_upper_bound(x[12], 400.0)
set_lower_bound(x[13], 0.0)
set_upper_bound(x[13], 0.0)
set_upper_bound(x[14], 520.0)
set_upper_bound(x[15], 400.0)
set_upper_bound(x[16], 500.0)
set_upper_bound(x[17], 630.0)
set_upper_bound(x[18], 600.0)


# ----- Constraints ----- #
@constraint(m, e1, -0.6*x[19]-0.3*x[24]-0.36*x[29] >= -170.0)
@constraint(m, e2, -0.6*x[20]-0.3*x[25]-0.36*x[30] >= -170.0)
@constraint(m, e3, -0.6*x[21]-0.3*x[26]-0.36*x[31] >= -170.0)
@constraint(m, e4, -0.6*x[22]-0.3*x[27]-0.36*x[32] >= -170.0)
@constraint(m, e5, -0.6*x[23]-0.3*x[28]-0.36*x[33] >= -170.0)
@constraint(m, e6, -0.4*x[19]-0.1*x[24]-0.12*x[29] >= -170.0)
@constraint(m, e7, -0.4*x[20]-0.1*x[25]-0.12*x[30] >= -170.0)
@constraint(m, e8, -0.4*x[21]-0.1*x[26]-0.12*x[31] >= -170.0)
@constraint(m, e9, -0.4*x[22]-0.1*x[27]-0.12*x[32] >= -170.0)
@constraint(m, e10, -0.4*x[23]-0.1*x[28]-0.12*x[33] >= -170.0)
@constraint(m, e11, -0.36*x[19]-0.08*x[24]-0.06*x[29] >= -180.0)
@constraint(m, e12, -0.36*x[20]-0.08*x[25]-0.06*x[30] >= -180.0)
@constraint(m, e13, -0.36*x[21]-0.08*x[26]-0.06*x[31] >= -180.0)
@constraint(m, e14, -0.36*x[22]-0.08*x[27]-0.06*x[32] >= -180.0)
@constraint(m, e15, -0.36*x[23]-0.08*x[28]-0.06*x[33] >= -180.0)
@constraint(m, e16, -x[2]+x[19] >= 0.0)
@constraint(m, e17, -x[2]-x[3]+x[19]+x[20] >= 0.0)
@constraint(m, e18, -x[2]-x[3]-x[4]+x[19]+x[20]+x[21] >= 0.0)
@constraint(m, e19, -x[2]-x[3]-x[4]-x[5]+x[19]+x[20]+x[21]+x[22] >= 0.0)
@constraint(m, e20, -x[2]-x[3]-x[4]-x[5]-x[6]+x[19]+x[20]+x[21]+x[22]+x[23] >= 0.0)
@constraint(m, e21, -x[8]+x[24] >= 0.0)
@constraint(m, e22, -x[8]-x[9]+x[24]+x[25] >= 0.0)
@constraint(m, e23, -x[8]-x[9]-x[10]+x[24]+x[25]+x[26] >= 0.0)
@constraint(m, e24, -x[8]-x[9]-x[10]-x[11]+x[24]+x[25]+x[26]+x[27] >= 0.0)
@constraint(m, e25, -x[8]-x[9]-x[10]-x[11]-x[12]+x[24]+x[25]+x[26]+x[27]+x[28] >= 0.0)
@constraint(m, e26, -x[14]+x[29] >= 0.0)
@constraint(m, e27, -x[14]-x[15]+x[29]+x[30] >= 0.0)
@constraint(m, e28, -x[14]-x[15]-x[16]+x[29]+x[30]+x[31] >= 0.0)
@constraint(m, e29, -x[14]-x[15]-x[16]-x[17]+x[29]+x[30]+x[31]+x[32] >= 0.0)
@constraint(m, e30, -x[14]-x[15]-x[16]-x[17]-x[18]+x[29]+x[30]+x[31]+x[32]+x[33] >= 0.0)
@NLconstraint(m, e31, 1000*x[2]-0.3* (x[2])^2-120*x[2]-0.02* (x[19]-x[1])^2-310*x[19]-0.005* (x[19]-x[2])^2+80*x[2]-80*x[19]+520*x[8]-0.1* (x[8])^2-65*x[8]-0.01* (x[24]-x[7])^2-150*x[24]-0.005* (x[24]-x[8])^2+45*x[8]-45*x[24]+910*x[14]-0.2* (x[14])^2-105*x[14]-0.015* (x[29]-x[13])^2-280*x[29]-0.005* (x[29]-x[14])^2+75*x[14]-75*x[29]+1000*x[3]-0.3* (x[3])^2-150*x[3]-0.2* (x[20]-x[2])^2-310*x[20]-0.05* (x[20]-x[3])^2+80*x[2]+80*x[3]-80*x[20]+520*x[9]-0.1* (x[9])^2-65*x[9]-0.1* (x[25]-x[8])^2-150*x[25]-0.05* (x[25]-x[9])^2+45*x[8]+45*x[9]-45*x[25]+910*x[15]-0.2* (x[15])^2-105*x[15]-0.15* (x[30]-x[14])^2-280*x[30]-0.05* (x[30]-x[15])^2+75*x[14]+75*x[15]-75*x[30]-80*x[19]-45*x[24]-75*x[29]+1000*x[4]-0.3* (x[4])^2-150*x[4]-0.25* (x[21]-x[3])^2-310*x[21]-0.06* (x[21]-x[4])^2+100*x[3]+100*x[4]-100*x[21]+520*x[10]-0.1* (x[10])^2-80*x[10]-0.1* (x[26]-x[9])^2-150*x[26]-0.06* (x[26]-x[10])^2+45*x[9]+45*x[10]-45*x[26]+1000*x[16]-0.2* (x[16])^2-120*x[16]-0.15* (x[31]-x[15])^2-280*x[31]-0.06* (x[31]-x[16])^2+90*x[15]+90*x[16]-90*x[31]+100*x[2]+45*x[8]+90*x[14]-100*x[19]-100*x[20]-45*x[24]-45*x[25]-90*x[29]-90*x[30]+1100*x[5]-0.3* (x[5])^2-170*x[5]-0.25* (x[22]-x[4])^2-350*x[22]-0.06* (x[22]-x[5])^2+100*x[4]+100*x[5]-100*x[22]+600*x[11]-0.1* (x[11])^2-80*x[11]-0.15* (x[27]-x[10])^2-180*x[27]-0.06* (x[27]-x[11])^2+50*x[10]+50*x[11]-50*x[27]+1000*x[17]-0.2* (x[17])^2-120*x[17]-0.15* (x[32]-x[16])^2-300*x[32]-0.06* (x[32]-x[17])^2+90*x[16]+90*x[17]-90*x[32]+100*x[2]+100*x[3]+50*x[8]+50*x[9]+90*x[14]+90*x[15]-100*x[19]-100*x[20]-100*x[21]-50*x[24]-50*x[25]-50*x[26]-90*x[29]-90*x[30]-90*x[31]+1100*x[6]-0.3* (x[6])^2-170*x[6]-0.25* (x[23]-x[5])^2-350*x[23]-0.06* (x[23]-x[6])^2+100*x[5]+100*x[6]-100*x[23]+600*x[12]-0.1* (x[12])^2-80*x[12]-0.15* (x[28]-x[11])^2-180*x[28]-0.06* (x[28]-x[12])^2+50*x[11]+50*x[12]-50*x[28]+1000*x[18]-0.2* (x[18])^2-120*x[18]-0.15* (x[33]-x[17])^2-300*x[33]-0.06* (x[33]-x[18])^2+90*x[17]+90*x[18]-90*x[33]+100*x[2]+100*x[3]+100*x[4]+50*x[8]+50*x[9]+50*x[10]+90*x[14]+90*x[15]+90*x[16]-100*x[19]-100*x[20]-100*x[21]-100*x[22]-50*x[24]-50*x[25]-50*x[26]-50*x[27]-90*x[29]-90*x[30]-90*x[31]-90*x[32]+objvar == 0.0)


# ----- Objective ----- #
@objective(m, Min, objvar)

m = m 		 # model get returned when including this script.