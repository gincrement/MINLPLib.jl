using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 17]
@variable(m, x[x_Idx])
b_Idx = Any[11, 12, 13, 14, 15, 16]
@variable(m, b[b_Idx])
set_lower_bound(x[4], 0.0)
set_lower_bound(x[6], 0.0)
set_binary(b[12])
set_lower_bound(x[3], 0.0)
set_binary(b[14])
set_binary(b[15])
set_binary(b[11])
set_lower_bound(x[5], 0.0)
set_lower_bound(x[2], 0.0)
set_binary(b[16])
set_lower_bound(x[9], 0.0)
set_lower_bound(x[1], 0.0)
set_lower_bound(x[7], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[10], 0.0)
set_binary(b[13])


# ----- Constraints ----- #
@constraint(m, e1, -20*x[5]-40*b[11]+x[17] == 0.0)
@constraint(m, e2, x[2] >= 4000.0)
@constraint(m, e3, x[3] >= 4000.0)
@constraint(m, e4, x[4] >= 4000.0)
@constraint(m, e5, x[2] <= 7500.0)
@constraint(m, e6, x[3] <= 7500.0)
@constraint(m, e7, x[4] <= 7500.0)
@constraint(m, e8, x[1] == 7500.0)
@constraint(m, e9, b[11]+b[12] <= 1.0)
@constraint(m, e10, b[11]+b[12] <= 1.0)
@constraint(m, e11, b[13]+b[15] <= 1.0)
@constraint(m, e12, b[14]+b[16] <= 1.0)
@constraint(m, e13, b[13]+b[15] <= 1.0)
@constraint(m, e14, b[14]+b[16] <= 1.0)
@constraint(m, e15, x[5]-100000000*b[11] <= 0.0)
@constraint(m, e16, x[6]-100000000*b[12] <= 0.0)
@constraint(m, e17, x[7]-100000000*b[13] <= 0.0)
@constraint(m, e18, x[8]-100000000*b[14] <= 0.0)
@constraint(m, e19, x[9]-100000000*b[15] <= 0.0)
@constraint(m, e20, x[10]-100000000*b[16] <= 0.0)
@constraint(m, e21, -100000000*x[5]+b[11] <= 0.0)
@constraint(m, e22, -100000000*x[6]+b[12] <= 0.0)
@constraint(m, e23, -100000000*x[7]+b[13] <= 0.0)
@constraint(m, e24, -100000000*x[8]+b[14] <= 0.0)
@constraint(m, e25, -100000000*x[9]+b[15] <= 0.0)
@constraint(m, e26, -100000000*x[10]+b[16] <= 0.0)
@constraint(m, e27, x[1]-x[2]-100000000*b[11] <= 0.0)
@constraint(m, e28, -x[1]+x[2]-100000000*b[12] <= 0.0)
@constraint(m, e29, x[2]-x[3]-100000000*b[13] <= 0.0)
@constraint(m, e30, x[2]-x[4]-100000000*b[14] <= 0.0)
@constraint(m, e31, -x[2]+x[3]-100000000*b[15] <= 0.0)
@constraint(m, e32, -x[2]+x[4]-100000000*b[16] <= 0.0)
@constraint(m, e33, -x[1]+x[2]+100000000*b[11] <= 1.0e8)
@constraint(m, e34, x[1]-x[2]+100000000*b[12] <= 1.0e8)
@constraint(m, e35, -x[2]+x[3]+100000000*b[13] <= 1.0e8)
@constraint(m, e36, -x[2]+x[4]+100000000*b[14] <= 1.0e8)
@constraint(m, e37, x[2]-x[3]+100000000*b[15] <= 1.0e8)
@constraint(m, e38, x[2]-x[4]+100000000*b[16] <= 1.0e8)
@constraint(m, e39, x[7]-x[9] == 2.0e6)
@constraint(m, e40, x[8]-x[10] == 3.0e6)
@constraint(m, e41, x[5]-x[6]-x[7]-x[8]+x[9]+x[10] == 0.0)
@constraint(m, e42, x[5] >= 0.0)
@constraint(m, e43, x[5] <= 8.0e6)
@NLconstraint(m, e44, x[1]*x[1]-x[2]*x[2]-0.249149*x[5]*x[5] == 0.0)
@NLconstraint(m, e45, x[2]*x[2]-x[1]*x[1]-0.249149*x[6]*x[6] == 0.0)
@NLconstraint(m, e46, x[2]*x[2]-x[3]*x[3]-0.249149*x[7]*x[7] == 0.0)
@NLconstraint(m, e47, x[2]*x[2]-x[4]*x[4]-0.249149*x[8]*x[8] == 0.0)
@NLconstraint(m, e48, x[3]*x[3]-x[2]*x[2]-0.249149*x[9]*x[9] == 0.0)
@NLconstraint(m, e49, x[4]*x[4]-x[2]*x[2]-0.249149*x[10]*x[10] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[17])

m = m 		 # model get returned when including this script.