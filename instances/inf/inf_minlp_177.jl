using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
@variable(m, x[x_Idx])
b_Idx = Any[50, 51]
@variable(m, b[b_Idx])
set_lower_bound(x[9], 0.0)
set_lower_bound(x[8], 0.0)
set_lower_bound(x[7], 0.0)
set_binary(b[51])
set_binary(b[50])
set_lower_bound(x[11], 0.0)
set_lower_bound(x[10], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[1], 150.0)
set_upper_bound(x[1], 1500.0)
set_lower_bound(x[2], 150.0)
set_upper_bound(x[2], 1500.0)
set_lower_bound(x[3], 150.0)
set_upper_bound(x[3], 1500.0)
set_lower_bound(x[4], 150.0)
set_upper_bound(x[4], 1500.0)
set_lower_bound(x[5], 150.0)
set_upper_bound(x[5], 1500.0)
set_lower_bound(x[6], 150.0)
set_upper_bound(x[6], 1500.0)
set_upper_bound(x[7], 1000.0)
set_upper_bound(x[8], 1000.0)
set_upper_bound(x[9], 1000.0)
set_upper_bound(x[10], 1000.0)
set_upper_bound(x[11], 1000.0)
set_upper_bound(x[12], 1000.0)
set_lower_bound(x[13], 1000.0)
set_upper_bound(x[13], 1100.0)
set_lower_bound(x[14], 1000.0)
set_upper_bound(x[14], 1100.0)
set_lower_bound(x[15], 1000.0)
set_upper_bound(x[15], 1100.0)
set_lower_bound(x[16], 1000.0)
set_upper_bound(x[16], 1100.0)
set_lower_bound(x[17], 1000.0)
set_upper_bound(x[17], 1100.0)
set_lower_bound(x[18], 1000.0)
set_upper_bound(x[18], 1100.0)
set_lower_bound(x[43], 100000.0)
set_upper_bound(x[43], 100000.0)
set_lower_bound(x[44], 60000.0)
set_upper_bound(x[44], 120000.0)
set_lower_bound(x[45], 60000.0)
set_upper_bound(x[45], 120000.0)
set_lower_bound(x[46], 60000.0)
set_upper_bound(x[46], 120000.0)
set_lower_bound(x[47], 60000.0)
set_upper_bound(x[47], 120000.0)
set_lower_bound(x[48], 60000.0)
set_upper_bound(x[48], 60000.0)


# ----- Constraints ----- #
@NLconstraint(m, e1, -(0.00184*x[1]*x[1]+9.2*x[1]+0.00184*x[2]*x[2]+9.2*x[2]+0.00184*x[3]*x[3]+9.2*x[3]+0.00184*x[4]*x[4]+9.2*x[4]+0.00184*x[5]*x[5]+9.2*x[5]+0.00184*x[6]*x[6]+9.2*x[6])+x[49] == 3450.0)
@constraint(m, e2, -x[1]-x[19] == -1200.0)
@constraint(m, e3, -x[2]-x[20] == -1500.0)
@constraint(m, e4, -x[3]-x[21] == -1100.0)
@constraint(m, e5, -x[4]-x[22] == -1800.0)
@constraint(m, e6, -x[5]-x[23] == -950.0)
@constraint(m, e7, -x[6]-x[24] == -1300.0)
@constraint(m, e8, -x[25]-x[31]+x[37] == 0.0)
@constraint(m, e9, -x[26]-x[32]+x[38] == 0.0)
@constraint(m, e10, -x[27]-x[33]+x[39] == 0.0)
@constraint(m, e11, -x[28]-x[34]+x[40] == 0.0)
@constraint(m, e12, -x[29]-x[35]+x[41] == 0.0)
@constraint(m, e13, -x[30]-x[36]+x[42] == 0.0)
@constraint(m, e14, b[50]+b[51] == 1.0)
@constraint(m, e15, x[37]+x[43]-x[44] == 2000.0)
@constraint(m, e16, x[38]+x[44]-x[45] == 2000.0)
@constraint(m, e17, x[39]+x[45]-x[46] == 2000.0)
@constraint(m, e18, x[40]+x[46]-x[47] == 2000.0)
@constraint(m, e19, x[41]+x[47]-x[48] == 2000.0)
@constraint(m, e20, x[42]+x[48] == 2000.0)
@constraint(m, e21, -x[7]-x[13]+x[19] == 0.0)
@constraint(m, e22, -x[8]-x[14]+x[20] == 0.0)
@constraint(m, e23, -x[9]-x[15]+x[21] == 0.0)
@constraint(m, e24, -x[10]-x[16]+x[22] == 0.0)
@constraint(m, e25, -x[11]-x[17]+x[23] == 0.0)
@constraint(m, e26, -x[12]-x[18]+x[24] == 0.0)
@NLconstraint(m, e27, -b[50]*(330+4.97*x[7])+x[25] == 0.0)
@NLconstraint(m, e28, -b[50]*(330+4.97*x[8])+x[26] == 0.0)
@NLconstraint(m, e29, -b[50]*(330+4.97*x[9])+x[27] == 0.0)
@NLconstraint(m, e30, -b[50]*(330+4.97*x[10])+x[28] == 0.0)
@NLconstraint(m, e31, -b[50]*(330+4.97*x[11])+x[29] == 0.0)
@NLconstraint(m, e32, -b[50]*(330+4.97*x[12])+x[30] == 0.0)
@NLconstraint(m, e33, -(-6700+(-50+0.05*x[13])*(-1000+x[13])+12*x[13])*b[51]+x[31] == 0.0)
@NLconstraint(m, e34, -(-6700+(-50+0.05*x[14])*(-1000+x[14])+12*x[14])*b[51]+x[32] == 0.0)
@NLconstraint(m, e35, -(-6700+(-50+0.05*x[15])*(-1000+x[15])+12*x[15])*b[51]+x[33] == 0.0)
@NLconstraint(m, e36, -(-6700+(-50+0.05*x[16])*(-1000+x[16])+12*x[16])*b[51]+x[34] == 0.0)
@NLconstraint(m, e37, -(-6700+(-50+0.05*x[17])*(-1000+x[17])+12*x[17])*b[51]+x[35] == 0.0)
@NLconstraint(m, e38, -(-6700+(-50+0.05*x[18])*(-1000+x[18])+12*x[18])*b[51]+x[36] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[49])

m = m 		 # model get returned when including this script.