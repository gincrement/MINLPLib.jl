using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[30, 31]
@variable(m, x[x_Idx])
i_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
@variable(m, i[i_Idx])
set_integer(i[8])
set_lower_bound(i[8], 0.0)
set_upper_bound(i[8], 100.0)
set_integer(i[23])
set_lower_bound(i[23], 0.0)
set_upper_bound(i[23], 100.0)
set_integer(i[21])
set_lower_bound(i[21], 0.0)
set_upper_bound(i[21], 100.0)
set_integer(i[12])
set_lower_bound(i[12], 0.0)
set_upper_bound(i[12], 100.0)
set_integer(i[27])
set_lower_bound(i[27], 0.0)
set_upper_bound(i[27], 100.0)
set_integer(i[24])
set_lower_bound(i[24], 0.0)
set_upper_bound(i[24], 100.0)
set_integer(i[29])
set_lower_bound(i[29], 0.0)
set_upper_bound(i[29], 100.0)
set_integer(i[19])
set_lower_bound(i[19], 0.0)
set_upper_bound(i[19], 100.0)
set_integer(i[5])
set_lower_bound(i[5], 0.0)
set_upper_bound(i[5], 100.0)
set_integer(i[3])
set_lower_bound(i[3], 0.0)
set_upper_bound(i[3], 100.0)
set_integer(i[2])
set_lower_bound(i[2], 0.0)
set_upper_bound(i[2], 100.0)
set_integer(i[13])
set_lower_bound(i[13], 0.0)
set_upper_bound(i[13], 100.0)
set_integer(i[28])
set_lower_bound(i[28], 0.0)
set_upper_bound(i[28], 100.0)
set_integer(i[6])
set_lower_bound(i[6], 0.0)
set_upper_bound(i[6], 100.0)
set_integer(i[26])
set_lower_bound(i[26], 0.0)
set_upper_bound(i[26], 100.0)
set_integer(i[4])
set_lower_bound(i[4], 0.0)
set_upper_bound(i[4], 100.0)
set_integer(i[9])
set_lower_bound(i[9], 0.0)
set_upper_bound(i[9], 100.0)
set_integer(i[22])
set_lower_bound(i[22], 0.0)
set_upper_bound(i[22], 100.0)
set_integer(i[14])
set_lower_bound(i[14], 0.0)
set_upper_bound(i[14], 100.0)
set_integer(i[16])
set_lower_bound(i[16], 0.0)
set_upper_bound(i[16], 100.0)
set_integer(i[10])
set_lower_bound(i[10], 0.0)
set_upper_bound(i[10], 100.0)
set_integer(i[15])
set_lower_bound(i[15], 0.0)
set_upper_bound(i[15], 100.0)
set_integer(i[17])
set_lower_bound(i[17], 0.0)
set_upper_bound(i[17], 100.0)
set_integer(i[7])
set_lower_bound(i[7], 0.0)
set_upper_bound(i[7], 100.0)
set_integer(i[20])
set_lower_bound(i[20], 0.0)
set_upper_bound(i[20], 100.0)
set_integer(i[11])
set_lower_bound(i[11], 0.0)
set_upper_bound(i[11], 100.0)
set_integer(i[1])
set_lower_bound(i[1], 0.0)
set_upper_bound(i[1], 100.0)
set_integer(i[25])
set_lower_bound(i[25], 0.0)
set_upper_bound(i[25], 100.0)
set_integer(i[18])
set_lower_bound(i[18], 0.0)
set_upper_bound(i[18], 100.0)
set_upper_bound(i[1], 1.0)
set_upper_bound(i[2], 1.0)
set_upper_bound(i[3], 1.0)
set_upper_bound(i[4], 1.0)
set_upper_bound(i[5], 1.0)
set_upper_bound(i[6], 1.0)
set_upper_bound(i[7], 1.0)
set_upper_bound(i[8], 1.0)
set_upper_bound(i[9], 1.0)
set_upper_bound(i[10], 1.0)
set_upper_bound(i[11], 1.0)
set_upper_bound(i[12], 1.0)
set_upper_bound(i[13], 1.0)
set_upper_bound(i[14], 1.0)
set_upper_bound(i[15], 1.0)
set_upper_bound(i[16], 1.0)
set_upper_bound(i[17], 1.0)
set_upper_bound(i[18], 1.0)
set_upper_bound(i[19], 1.0)
set_upper_bound(i[20], 1.0)
set_upper_bound(i[21], 1.0)
set_upper_bound(i[22], 1.0)
set_upper_bound(i[23], 1.0)
set_upper_bound(i[24], 1.0)
set_upper_bound(i[25], 1.0)
set_upper_bound(i[26], 1.0)
set_upper_bound(i[27], 1.0)
set_upper_bound(i[28], 1.0)
set_upper_bound(i[29], 1.0)


# ----- Constraints ----- #
@constraint(m, e1, -i[1]-i[2]-i[3]-i[4]-i[5]-i[6]-i[7]-i[8]-i[9]-i[10]-i[11]-i[12]-i[13]-i[14]-i[15]-i[16]-i[17]-i[18]-i[19]-i[20]-i[21]-i[22]-i[23]-i[24]-i[25]-i[26]-i[27]-i[28]-i[29]+x[31] == 0.0)
@constraint(m, e2, x[30] == 48.8354)
@constraint(m, e3, x[30] == 23.7815)
@constraint(m, e4, x[30] == 24.8384)
@constraint(m, e5, x[30] == 43.3569)


# ----- Objective ----- #
@objective(m, Max, x[31])

m = m 		 # model get returned when including this script.