using JuMP

m = Model()

# ----- Variables ----- #
x_Idx = Any[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
@variable(m, x[x_Idx])
i_Idx = Any[31]
@variable(m, i[i_Idx])
set_lower_bound(x[16], 0.0)
set_lower_bound(x[27], 0.0)
set_lower_bound(x[14], 0.0)
set_lower_bound(x[17], 0.0)
set_lower_bound(x[3], 0.0)
set_lower_bound(x[25], 0.0)
set_lower_bound(x[26], 0.0)
set_lower_bound(x[23], 0.0)
set_lower_bound(x[11], 0.0)
set_lower_bound(x[29], 0.0)
set_lower_bound(x[22], 0.0)
set_lower_bound(x[12], 0.0)
set_lower_bound(x[5], 0.0)
set_lower_bound(x[19], 0.0)
set_integer(i[31])
set_lower_bound(i[31], 0.0)
set_upper_bound(i[31], 100.0)
set_lower_bound(x[20], 0.0)
set_lower_bound(x[24], 0.0)
set_lower_bound(x[18], 0.0)
set_lower_bound(x[9], 0.0)
set_lower_bound(x[15], 0.0)
set_lower_bound(x[1], 0.0)
set_lower_bound(x[13], 0.0)
set_lower_bound(x[21], 0.0)
set_lower_bound(x[28], 0.0)
set_lower_bound(x[10], 0.0)
set_upper_bound(x[1], 390.0)
set_lower_bound(x[2], 1.0e-9)
set_upper_bound(x[2], 700.0)
set_lower_bound(x[4], 3.93700787401575)
set_upper_bound(x[4], 5.74803149606299)
set_lower_bound(x[6], 1.0e-9)
set_lower_bound(x[7], 1.0e-9)
set_lower_bound(x[8], 1.0e-9)
set_upper_bound(i[31], 100.0)


# ----- Constraints ----- #
@constraint(m, e1, x[6]-0.001*x[14] == -0.000381)
@NLconstraint(m, e2, 0.3141593*x[4]*(x[13]-2*x[14])*x[7]-0.0015707965*x[13] == 0.0)
@NLconstraint(m, e3, -sqrt( (x[6])^2+ (x[7])^2)+x[8] == 0.0)
@NLconstraint(m, e4, 0.3141593*x[4]*(x[13]-2*x[14])*x[9]-0.000667556742323097*x[5]/x[2] == 0.0)
@NLconstraint(m, e5, -sqrt(1-2*x[9]/x[6]/x[7])+x[10] == 0.0)
@NLconstraint(m, e6, -x[6]*x[7]/x[8]*(1-x[10])+x[11] == 0.0)
@NLconstraint(m, e7, x[12]*x[10]*x[15] == 0.471947)
@NLconstraint(m, e8, -1.79e-5*x[12]*(136410000000+4806000000000*x[11]) == -249.082)
@constraint(m, e9, -0.865*x[1]+x[13] == -17.0)
@constraint(m, e10, x[3]-0.5*x[13] >= 12.0)
@constraint(m, e11, x[3]-x[13] <= -40.0)
@constraint(m, e12, 0.5*x[3]-0.5*x[13]+x[14] == 6.0)
@NLconstraint(m, e13, -6.283186e-7*x[4]*(x[13]-2*x[14])*x[14]*x[2]+x[15] == 0.0)
@NLconstraint(m, e14, -3.141593e-6*(x[13]*x[2]+(x[13]-2*x[14])*(-20+x[2]))+x[16] == 0.0)
@NLconstraint(m, e15, -7.8539825e-10*(20*(2*x[13]*x[13]- ((-40)+x[13])^2- ((-60)+x[13])^2)+15* (x[13])^2)+x[17] == 0.0)
@constraint(m, e16, x[18]-x[19]-x[20]-x[21]-x[22]-x[23]-x[24]-x[25] == 0.0)
@constraint(m, e17, -0.38*x[15]+x[19] == 0.0)
@constraint(m, e18, -2.07*x[16]+x[20] == 0.0)
@constraint(m, e19, -1200*x[17]+x[21] == 0.0)
@NLconstraint(m, e20, -0.84*x[15]/x[2]+x[22] == 0.0)
@constraint(m, e21, -0.34*x[16]+x[23] == 0.0)
@NLconstraint(m, e22, -0.000391*(4*x[13]*x[2]+6* (x[13])^2)+x[24] == 0.0)
@NLconstraint(m, e23, -22.08* (i[31])^2+x[25] == 0.0)
@constraint(m, e24, -0.45*x[18]+x[26] == 0.0)
@constraint(m, e25, -x[18]-x[26]+x[27] == 0.0)
@NLconstraint(m, e26, -1120/(10+x[13])+i[31] == 0.0)
@NLconstraint(m, e27, -0.006289469186*(2* (0.05*x[1])^2+0.1*x[1]*x[2])+x[28] == 0.0)
@constraint(m, e28, -0.8*x[15]+x[29] == 0.0)
@constraint(m, e29, -x[27]-x[28]-x[29]+x[30] == 0.0)


# ----- Objective ----- #
@objective(m, Min, x[30])

m = m 		 # model get returned when including this script.